#summary UIDs for event, session, video, audio and photos

Note - this is just a draft - it still needs to be properly fleshed out.

=Introduction=

Here we talk about UIDs rather than UUIDs because we do not care about uniqueness beyond this application. If we wanted a UUID, then we would just prefix the UID with an application identifier...

Anything we want to refer to within the application, has a UID. This includes events, sessions, paragraphs, device codes, event types etc.

=Format=

The format of a UID is:

*{domain}:{domain-wide-id}*

where domain has the format: *{top-level-domain}[-{context}]*
and   id has the format: *[{grouping}-]{local-id}*

top-level-domain is one of: event-type|event|session|audio|video|image|device-code|markup-type|markup-category|concept|tape
context and grouping are both optional

So, expanded in full, the format of a UID is:

*{top-level-domain}:[{context}#][{grouping}-]{local-id}*

Example: *event-type-n* (where top-level-domain = event-type, local-id = n)

The regexp for each of these four components is:

{{{[a-z0-9]*([a-z0-9]\-[a-z0-9])*[a-z0-9]*}}}

(but not the empty string)

which is essentially saying that it contains any sequence of letters, digits and hyphens and that every hyphen is surrounded by letters/digits.

In situations where we do not have direct control over the UID (e.g. event, session), the local-id is an incremental integer.

Where we do have direct control over the UID (event-type, device-code), the local-id is a bit more descriptive (e.g. aud-1, topic)

Any domain-wide-id can be used as a context or grouping.

For example, an event's domain-wide-id (n-123) is used as the grouping value for sessions (n-123-1).

=Examples=

These are the main UIDs.

|| || UID || top-level-domain || context || grouping || local-id ||
|| Event type || *event-type:n* || event-type || || || n ||
|| Event || *event:n-123* || event || || n (event-type local-id)|| 123 ||
|| Session || *session:n-123-1* || session || || n-123 (event local-id) || 1 ||
|| Media || *audio:n-123* || audio || || n (event-type local-id) || 123 ||
|| Device code || *device-code:aud-1* || device-code || || || aud-1 ||
|| Markup type || *markup-type:topic* || markup-type || || || topic ||
|| Markup category || *markup-category:pope-joke-1* || markup-category || || || pope-joke-1 ||
|| Concept || *concept:life* || concept || || || life ||
|| Segment || *segment:n-123-1#p-1* || segment || n-123-1 || p || 1 ||
|| Markup || *markup:n-123-1#o-1* || markup || n-123-1 || o || 1 ||
|| Tape || *tape:1* || tape || || || 1 ||

` `

=Representation in XML=

In the XML we specify domain-wide-ids in the "@id" attributes. The top level domains are used as the element tag name. For example:

<event id="n-123" ...>

Referring to a UID we do something like:

<session ... eventId="n-123"> (for incremental local-ids)
<device ... deviceCode="aud-1"> (for code-based local-ids)

i.e. the top-level-domain is used in the attribute name and the local-id is attribute value

This is not strictly enforced. For example:

<event ... type="n">

should really be

<event ... eventType="n">

but who cares :)

Another inconsistency: the markup elements are named "superSegment" and "superContent" rather than "markup" - this is to assist queries and is not really a problem since superSegment and superContent are both types of markup.

Where there is a context component in the UID, this is always specified by way of the element being a descendant of some element representing that context. For example, the segment with UID segment:n-123-1#p-1 is represented by an element (with @id = p-1) that is a descendant of the session with UID n-123-1.