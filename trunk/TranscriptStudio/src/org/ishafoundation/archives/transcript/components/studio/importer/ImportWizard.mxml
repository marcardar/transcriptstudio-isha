<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="470" height="600" horizontalAlign="center" title="{getTitle(viewstack.selectedChild)}" creationComplete="init()" xmlns:metadata="org.ishafoundation.archives.transcript.components.studio.metadata.*" xmlns:importer="org.ishafoundation.archives.transcript.components.studio.importer.*">
	<mx:Script>
	<![CDATA[
		import org.ishafoundation.archives.transcript.components.studio.metadata.EventPropertiesPane;
		import org.ishafoundation.archives.transcript.components.studio.metadata.EventPropertiesCreateDialog;
		import org.ishafoundation.archives.transcript.db.DatabaseManager;
		import mx.messaging.management.Attribute;
		import org.ishafoundation.archives.transcript.db.XQueryExecutor;
		import org.ishafoundation.archives.transcript.model.ReferenceManager;
		import org.ishafoundation.archives.transcript.db.DatabaseConstants;
		import org.ishafoundation.archives.transcript.importer.MSWordImporter;
		import mx.core.Container;
		import org.ishafoundation.archives.transcript.db.XMLStorer;
		import org.ishafoundation.archives.transcript.model.EventProperties;
		import mx.events.PropertyChangeEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.ishafoundation.archives.transcript.model.SessionProperties;
		import org.ishafoundation.archives.transcript.fs.EventFile;
		import org.ishafoundation.archives.transcript.fs.DbFileSystem;
		import org.ishafoundation.archives.transcript.fs.File;
		import org.ishafoundation.archives.transcript.fs.Collection;
		import name.carter.mark.flex.util.XMLUtils;
		import name.carter.mark.flex.util.Utils;
		import mx.managers.CursorManager;
		import name.carter.mark.flex.util.Utils;
		import mx.utils.StringUtil;
		import name.carter.mark.flex.util.collection.HashSet;
		import name.carter.mark.flex.util.collection.ISet;
		import org.ishafoundation.archives.transcript.util.IdUtils;
		import mx.formatters.DateFormatter;
		import mx.collections.ArrayCollection;
		import mx.formatters.DateBase;
		import mx.controls.TextInput;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		
		public static const OK_CLICKED:String = "OK_CLICKED";
		
		private var _databaseMgr:DatabaseManager;
		
		[Bindable]
		public var referenceMgr:ReferenceManager;
		
		private var _fileSystem:DbFileSystem;

		[Bindable]
		private var existingSessionIds:ISet;
		
		public var importer:MSWordImporter;
		
		public var sessionXML:XML;
		private var eventProps:EventProperties;
		public var eventFile:EventFile;
	
		private function init():void {
			for each (var child:Container in viewstack.getChildren()) {
				if (ChangeWatcher.canWatch(child, "ready")) {
					ChangeWatcher.watch(child, "ready", function(evt:PropertyChangeEvent):void {
						buttonBox.executeBindings(true);
					});
				}
			}
			var thisPanel:ImportWizard = this;
			eventSelectorPane.createEventButton.addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {
				eventFile = null;
				if (eventProps.startAt == null) {
					var sessionProps:SessionProperties = new SessionProperties(sessionXML);
					eventProps.startAt = sessionProps.startAt;
				}
				if (eventProps.endAt == null) {
					eventProps.endAt = eventProps.startAt;
				}
				var popup:EventPropertiesCreateDialog = EventPropertiesCreateDialog.display(thisPanel, fileSystem, databaseMgr, referenceMgr, eventProps.copy());
				popup.addEventListener(EventPropertiesCreateDialog.EVENT_CREATED, function(event:Event):void {
					eventProps = popup.eventPropertiesPane.eventProps;
					eventFile = fileSystem.getEventFile(eventProps.id);
					if (eventFile == null) {
						throw new Error("Could not find the event file we just saved: " + eventProps);
					}
					status = "Successfully created event: " + eventProps.id;
					Alert.show("Event ID: " + eventProps.id, "Successfully created event");
					nextInternal();
				});
			});
		}
		
		private function getTitle(vsChild:Container):String {
			if (vsChild == importFilesPane) {
				title = "Select file(s) to import...";
			}
			else if (vsChild == importFilesPreviewPane) {
				title = "Preview import files...";
			}
			else if (vsChild == eventSelectorPane) {
				title = "Select existing event...";
			}
			else if (vsChild == sessionPropertiesPane) {
				title = "Session properties...";
			}
			else {
				title = "Unknown pane";
			}
			return title;
		}
		
		[Bindable]
		public function set fileSystem(fileSystem:DbFileSystem):void {
			_fileSystem = fileSystem;
			existingSessionIds = fileSystem.getAllSessionIds();
		}
		
		public function get fileSystem():DbFileSystem {
			return _fileSystem;
		}
		
		public function get databaseMgr():DatabaseManager {
			return _databaseMgr;
		}

		public function set databaseMgr(databaseMgr:DatabaseManager):void {
			_databaseMgr = databaseMgr;
			setImportListDataProvider(databaseMgr);
		}
		
		private function backClicked(evt:MouseEvent):void {
			viewstack.selectedIndex--;
			if (viewstack.selectedChild == eventSelectorPane) {
				updateEventsList();
			}
		}

		private function nextClicked(evt:MouseEvent):void {
			// postprocess pane
			if (viewstack.selectedChild == importFilesPane) {
				enabled = false;
				var selectedPaths:Array = [];
				for each (var name:String in importList.selectedItems.reverse()) {
					selectedPaths.push(name);
				}
				CursorManager.setBusyCursor();
				importer.importAudioTranscripts(selectedPaths, function(audioTranscripts:Array):void {
					CursorManager.removeBusyCursor();
					importFilesPreviewPane.audioTranscripts = audioTranscripts;
					enabled = true;
					nextInternal();
				}, function (msg:String):void {
					CursorManager.removeBusyCursor();
					Alert.show("Import failed: " + msg);
					enabled = true;
					return;
				});
			}
			else if (viewstack.selectedChild == importFilesPreviewPane) {
				var eventXML:XML = MSWordImporter.createEventElement(importFilesPreviewPane.audioTranscripts);
				eventProps = new EventProperties(eventXML);
				sessionXML = MSWordImporter.createSessionElement(importFilesPreviewPane.audioTranscripts);
				nextInternal();
			}
			else if (viewstack.selectedChild == eventSelectorPane) {
				eventFile = eventSelectorPane.selectedEventFile;
				if (eventFile == null) {
					throw new Error("Tried to progress without selecting event");
				}
				databaseMgr.query("collection('/db/ts4isha/data')/event[@id = $arg0]", [eventFile.nodeId], function(returnVal:XML):void {
					var eventXML:XML = returnVal.event[0];
					if (eventXML == null) {
						Alert.show("Could not find event XML: " + eventFile.nodeId);
					}
					else {
						eventProps = new EventProperties(eventXML);
						nextInternal();
					}
				}, function(msg:String):void {
					Alert.show(msg, "Could not retrieve event XML: " + eventFile.nodeId);
				});
			}
		}
			
		private function nextInternal():void {
			viewstack.selectedIndex++;
			// preprocess pane
			if (viewstack.selectedChild == importFilesPane) {
			}
			else if (viewstack.selectedChild == importFilesPreviewPane) {
				
			}
			else if (viewstack.selectedChild == eventSelectorPane) {
				eventFile = null; // we don't want any event initially selected
				updateEventsList();
			}
			else if (viewstack.selectedChild == sessionPropertiesPane) {
				var sp:SessionProperties = new SessionProperties(sessionXML);
				sessionPropertiesPane.eventProps = eventProps;
				sessionPropertiesPane.sessionProps = sp;
			}
		}
		
		private function updateEventsList():void {
			eventSelectorPane.allEvents = fileSystem.getAllEvents();
			if (eventFile != null) {
				callLater(function():void {
					eventSelectorPane.selectedEventFile = eventFile;
				});
			}
		}
		
		private function labelFunc(file:File):String {
			return file.name;
		}
		
		private function finishClicked(event:Event):void {
			// now we might have the session date so use that to prefix the media UUIDs
			var mediaIdPrefix:String;
			if (sessionPropertiesPane.sessionProps.startAt == null) {
				mediaIdPrefix = "xxxxxxxx";
			}
			else {
				var startAtDate:Date = sessionPropertiesPane.sessionProps.startAt;
				mediaIdPrefix = startAtDate.fullYear + EventPropertiesPane.fixWidth(startAtDate.month + 1, 2) + EventPropertiesPane.fixWidth(startAtDate.date, 2);
			}
			// use the digits from the sourceId in the new mediaId
			mediaIdPrefix += "-" + eventProps.type;
			mediaIdPrefix += "1"; // TODO: maybe sometimes this should really be "2" or even "3"
			mediaIdPrefix += "-a1";
			populateId(function():void {
				for each (var mediaElement:XML in sessionXML.devices.device.media) {
					var sourceId:String = mediaElement.@id.toString();
					var mediaIdSuffix:String = sourceId.replace(/[a-z]/ig, "");
					while (mediaIdSuffix.length < 6) {
						mediaIdSuffix = "0" + mediaIdSuffix;
					}
					mediaElement.@id = mediaIdPrefix + "-" + mediaIdSuffix;
				}
				dispatchEvent(new Event(OK_CLICKED));
				closeMe();
			}, function(msg:String):void {
				throw new Error("Could not create new session id: " + msg);
			});
		}
		
		private function populateId(successFunc:Function, failureFunc:Function):void {
			// note - eventProps may not be populated (if existing event selected)
			var eventId:String = eventFile.nodeId;
			var sessionDate:String = Utils.getDateString(sessionPropertiesPane.sessionProps.startAt);
			var sessionTime:String = Utils.getTimeString(sessionPropertiesPane.sessionProps.startAt);
			var sessionTime4:String;
			if (sessionTime == null) {
				sessionTime4 = null;
			}
			else {
				var arr:Array = sessionTime.split(":");
				sessionTime4 = arr[0] + arr[1];
			}
			this.databaseMgr.executeStoredXQuery("create-session-id.xql", {eventId:eventId, sessionDate:sessionDate, sessionTime:sessionTime4}, function(returnVal:String):void {
				sessionPropertiesPane.sessionProps.id = returnVal;
				successFunc();
			}, failureFunc);
		}
			
		private function closeMe():void {
			PopUpManager.removePopUp(this);
		}
		
		private function isBackEnabled():Boolean {
			return viewstack != null && viewstack.selectedIndex > 0 && viewstack.selectedChild != sessionPropertiesPane;
		}
		
		private function isNextEnabled():Boolean {
			if (viewstack == null || viewstack.selectedIndex == viewstack.numChildren - 1) {
				// this is the last stack
				return false;
			}
			if (viewstack.selectedChild == importFilesPane) {
				return importList != null && importList.selectedIndices.length > 0;
			}
			else if (viewstack.selectedChild == importFilesPreviewPane) {
				return true;
			}
			else if (viewstack.selectedChild == eventSelectorPane) {
				return eventSelectorPane.ready;
			}
			else {
				return false;			
			}
		}
		
		private function isFinishEnabled():Boolean {
			if (viewstack.selectedIndex == viewstack.numChildren - 1) {
				// this is the last child
				return sessionPropertiesPane.ready;
			}
			else {
				return false;
			}
		}
		
		/*private static function getImportFiles(fileSystem:DbFileSystem):Array {
			var result:Array = fileSystem.getCollection(DatabaseConstants.IMPORT_COLLECTION_PATH).otherFiles;
			result.sort();
			return result;			
		}*/
		
		private function setImportListDataProvider(xqueryExecutor:XQueryExecutor):void {
			xqueryExecutor.query("import module namespace ts4isha='http://ishafoundation.org/ts4isha/xquery' at 'java:org.ishafoundation.ts4isha.xquery.modules.TranscriptStudioModule';ts4isha:import-file-name-list()", [], function(xml:XML):void {
				var names:Array = [];
				var nameAttrs:XMLList = xml.*.*.@name;
				for each (var name:String in nameAttrs) {
					names.push(name);
				}
				names.sort();
				importList.dataProvider = names;
			}, function (msg:String):void {
				Alert.show(msg, "Could not read import files listing");
			});
		}
		
	]]>
	</mx:Script>
	
	<mx:ViewStack id="viewstack" width="100%" height="100%" change="buttonBox.executeBindings(true)" creationPolicy="all">
		<mx:VBox id="importFilesPane" label="Import Session Files" width="100%" height="100%">
			<mx:List id="importList" width="100%" height="100%" allowMultipleSelection="true" change="buttonBox.executeBindings(true)"/>
		</mx:VBox>
		<importer:ImportFilesPreviewPane id="importFilesPreviewPane" width="100%" height="100%"/>
		<importer:EventSelectorPane id="eventSelectorPane" width="100%" height="100%"/>
		<metadata:SessionPropertiesPane id="sessionPropertiesPane" label="Session Properties" width="100%" height="100%" referenceMgr="{referenceMgr}"/>
	</mx:ViewStack>
	<mx:HBox id="buttonBox">
		<mx:Button label="&lt; Back" enabled="{isBackEnabled()}" click="backClicked(event)"/>
		<mx:Button id="nextButton" label="Next &gt;" enabled="{isNextEnabled()}" click="nextClicked(event)"/>
		<mx:Button label="Finish" enabled="{isFinishEnabled()}" click="finishClicked(event)" />
		<mx:Button label="Cancel" click="closeMe()"/>
	</mx:HBox>
	
</mx:TitleWindow>
