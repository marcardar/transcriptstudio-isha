<?xml version="1.0" encoding="utf-8"?>

<!--
   Transcript Markups Editor: An XML based application that allows users to define 
   and store contextual metadata for contiguous sections within a text document. 

   Copyright 2008 Mark Carter, Swami Kevala

   This file is part of Transcript Markups Editor.

   Transcript Markups Editor is free software: you can redistribute it and/or modify it 
   under the terms of the GNU General Public License as  published by the Free Software 
   Foundation, either version 3 of the License, or (at your option) any later version.

   Transcript Markups Editor is distributed in the hope that it will be useful, but 
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along with 
   Transcript Markups Editor. If not, see http://www.gnu.org/licenses/.
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" minWidth="345" minHeight="330" horizontalAlign="left" verticalGap="0" paddingBottom="5" backgroundColor="#FFFFFF" enabled="{this.markupAttrs != null}" creationComplete="clearPane()">
	<mx:Script>
    <![CDATA[
    	import name.carter.mark.flex.util.Utils;
    	import org.ishafoundation.archives.transcript.model.ReferenceManager;
    	import name.carter.mark.flex.util.icon.IconUtils;
    	import mx.managers.PopUpManager;
    	import org.ishafoundation.archives.transcript.components.generic.TextInputDialog;
    	import org.ishafoundation.archives.transcript.components.studio.category.CategorySearchDialog;
    	import mx.utils.StringUtil;
    	import mx.collections.ArrayCollection;
    	import org.ishafoundation.archives.transcript.model.Transcript;
    	import name.carter.mark.flex.project.mdoc.MSuperNodeProperties;

		[Embed(source="../assets/star_grey.png")]
		public static const STAR_GREY_ICON_CLASS:Class;
		[Embed(source="../assets/star_yellow.png")]
		public static const STAR_YELLOW_ICON_CLASS:Class;

		public static const MARKUP_REMOVE_EVENT:String = "MARKUP_REMOVE_EVENT";
		public static const MARKUP_PROPERTIES_CHANGE_EVENT:String = "MARKUP_PROPERTIES_CHANGE_EVENT";

		public var referenceMgr:ReferenceManager;

		[Bindable]
		public var markupAttrs:MSuperNodeProperties;
		[Bindable]
		public var committedMarkupAttrs:MSuperNodeProperties;

		public var titleFunc:Function;
		
		public function initPane(allowOutline:Boolean, allowInline:Boolean, markupAttrs:MSuperNodeProperties, committedMarkupAttrs:MSuperNodeProperties):void {
			this.markupAttrs = markupAttrs;
			this.committedMarkupAttrs = committedMarkupAttrs;
			setTitle();
			var ac:ArrayCollection = new ArrayCollection(this.referenceMgr.getCategoryTypeIds(allowOutline, allowInline));
			changeTypeList.dataProvider = ac;
			changeTypePopUpButton.popUp.height = 29 * ac.length; // IS THIS RISKY? Otherwise we get loads of blank space underneath
			categoryStyleToggleButtonBar.invalidateDisplayList(); // needed because the icon takes a while to load and so messes up the button
		}
		
		public function clearPane():void {
			this.markupAttrs = null;
			setTitle();
		}
		
		private function somethingChanged():void {
			setTitle();
			dispatchEvent(new Event(MARKUP_PROPERTIES_CHANGE_EVENT));
		}
		
		private function setTitle():void {
			if (markupAttrs == null) {
				titleText.text = "No markup selected";
			}
			else {
				titleText.text = titleFunc(markupAttrs, committedMarkupAttrs);
			}			
			titleText.validateNow(); // if we don't do this, it gets really ugly
		}
		
		private static function convertCsvToArray(csv:String):Array {
			var rawArray:Array = csv.split(",");
			var result:Array = new Array();
			for each (var s:String in rawArray) {
				var trimmed:String = StringUtil.trim(s); 
				if (trimmed.length > 0) {
					result.push(trimmed);
				}
			}
			return result;
		}
		
		private function categoryTypeChanged():void {
			var newTypeId:String = changeTypeList.selectedItem as String;
			if (newTypeId == null) {
				return;
			}
			this.markupAttrs.markupTypeId = newTypeId;
			somethingChanged();
		}
		
		private function predefinedClicked():void {
			var categorySearchDialog:CategorySearchDialog = new CategorySearchDialog();
			categorySearchDialog.referenceMgr = referenceMgr;
			PopUpManager.addPopUp(categorySearchDialog, this, true);
			if (markupAttrs.markupCategoryId != null) {
				categorySearchDialog.categorySearchPane.initialCategoryId = markupAttrs.markupCategoryId;
			}
            categorySearchDialog.categorySearchPane.typeComboBox.selectedItem = this.markupAttrs.markupTypeId;
			categorySearchDialog.addEventListener(Event.COMPLETE, function(event:Event):void {
				if (categorySearchDialog.categorySearchPane.selectedCategoryId != null) {
					markupAttrs.markupCategoryId = categorySearchDialog.categorySearchPane.selectedCategoryId;
					markupAttrs.markupCategorySuggestion = "";
					var categoryTypeIds:Array = referenceMgr.getCategoryTypeIdsForCategoryId(markupAttrs.markupCategoryId); 
					if (categoryTypeIds.indexOf(markupAttrs.markupTypeId) < 0) {
						// the type id is not compatible with the types of this predefined category
						markupAttrs.markupTypeId = categoryTypeIds[0];
					}
					somethingChanged();
				}
			}); 
		}
		
		private function suggestedClicked():void {
			var suggestDialog:TextInputDialog = TextInputDialog.display(this, "Category name [concepts]", this.markupAttrs.markupCategorySuggestion);
			suggestDialog.alpha = 2;
			suggestDialog.x = this.x + categoryStyleToggleButtonBar.x + 20;
			suggestDialog.y = this.y + categoryStyleToggleButtonBar.y + 20;
			suggestDialog.okButton.addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {
				var text:String = StringUtil.trim(suggestDialog.textInput.text);
				if (text != "" && text != markupAttrs.markupCategorySuggestion) {
					markupAttrs.markupCategorySuggestion = text;
					markupAttrs.markupCategoryId = null;
					somethingChanged();
				}
			});
		}
		
		private function uncategorizedClicked():void {
			this.markupAttrs.markupCategoryId = null;
			this.markupAttrs.markupCategorySuggestion = "";
			somethingChanged();
		}
		
		private function categoryStyleClicked():void {
			switch (categoryStyleToggleButtonBar.selectedIndex) {
				case 0:	predefinedClicked(); break;
				case 1: suggestedClicked(); break;
				case 2: uncategorizedClicked(); break;
			}
		}

		private function labelFunc(categoryTypeId:String):String {
			return this.referenceMgr == null ? null : this.referenceMgr.getCategoryTypeNameFromId(categoryTypeId);
		}
		
		private function getIconFunc():Function {
			var iconPathFunc:Function = function(categoryTypeId:String):String {
				return Utils.getIconPath(categoryTypeId);
			}
			return IconUtils.getIconFunctionForDataRenderer(changeTypeList, iconPathFunc, 24, 24, Utils.DEFAULT_ICON_CLASS);
		}
		
		private function getTypeIcon(categoryTypeId:String):Class {
			var iconPath:String = Utils.getIconPath(categoryTypeId);
			var typeIconClass:Class = IconUtils.getIconClass(typeImage, iconPath, 24, 24, Utils.DEFAULT_ICON_CLASS);
			// this next line forces IconUtils to redraw the icon
			//(typeIconClass as IEventDispatcher).dispatchEvent(new Event(Event.ADDED));
			return typeIconClass;
		}
		
		private function updateAdditionalTags():void {
			if (this.markupAttrs == null) {
				// it is possible this is called after the pane has been cleared/disabled because focusOut happens later
				return;
			}
			var newArray:Array = convertCsvToArray(this.additionalConceptsTextInput.text.toString());
			if (newArray.toString() != this.markupAttrs.additionalConcepts.toString()) {
				this.markupAttrs.additionalConcepts = newArray; 
				somethingChanged();
			}
		}
		
		private function summaryChanged():void {
			if (this.markupAttrs == null) {
				// it is possible this is called after the pane has been cleared/disabled because focusOut happens later
				return;
			}
			var newText:String = StringUtil.trim(summaryTextArea.text);
			if (newText != this.markupAttrs.summary) {
				this.markupAttrs.summary = newText; 
				somethingChanged();
			}
		}
		
		private function commentChanged():void {
			if (this.markupAttrs == null) {
				// it is possible this is called after the pane has been cleared/disabled because focusOut happens later
				return;
			}
			var newText:String = StringUtil.trim(commentTextArea.text);
			if (newText != this.markupAttrs.comment) {
				this.markupAttrs.comment = newText; 
				somethingChanged();
			}
		}
		
		private function starredChanged():void {
			if (this.markupAttrs == null) {
				// it is possible this is called after the pane has been cleared/disabled because focusOut happens later
				return;
			}
			if (this.starButton.selected) {
				if (this.markupAttrs.rating < 100) {
					this.markupAttrs.rating = 100;
					somethingChanged();
				}
			}
			else {
				if (this.markupAttrs.rating >= 0) {
					this.markupAttrs.rating = -1;
					somethingChanged();
				}
			}
		}
		
		private function revertClicked():void {
			this.markupAttrs.overwrite(committedMarkupAttrs);
			somethingChanged();
		}
		
		private function removeClicked():void {
			dispatchEvent(new Event(MARKUP_REMOVE_EVENT));
		}
    ]]>
	</mx:Script>
  	<mx:HBox width="100%" verticalAlign="top" horizontalGap="0">
		<mx:Image id="typeImage" height="24" width="24" horizontalAlign="right" verticalAlign="top" source="{this.markupAttrs == null ? Utils.DEFAULT_ICON_CLASS : getTypeIcon(this.markupAttrs.markupTypeId)}"/>
		<mx:Text id="titleText" width="100%" fontSize="14" fontWeight="bold" textDecoration="none" textAlign="left" fontFamily="arial"/>
		<mx:Button id="starButton" width="24" height="24" toggle="true" skin="{starButton.selected ? STAR_YELLOW_ICON_CLASS : STAR_GREY_ICON_CLASS}" selected="{this.markupAttrs.rating >= 0}" change="starredChanged()"/>			
	</mx:HBox>
	<mx:VBox width="100%" height="100%" verticalGap="0">
		<mx:HBox width="100%" paddingBottom="5" paddingTop="15" paddingRight="5">
			<mx:HBox width="50%" horizontalAlign="left">
				<mx:PopUpButton id="changeTypePopUpButton" label="Change type" openAlways="true" minWidth="130" close="categoryTypeChanged();">
					<mx:popUp>
						<mx:List id="changeTypeList" textAlign="center" minWidth="120" labelFunction="labelFunc" iconFunction="getIconFunc()"/>
					</mx:popUp>
				</mx:PopUpButton>
			</mx:HBox>
		</mx:HBox>
		<mx:Label text="Category"/>
		<mx:ToggleButtonBar id="categoryStyleToggleButtonBar" itemClick="categoryStyleClicked();" width="330" horizontalAlign="left" selectedIndex="{this.markupAttrs.markupCategoryId != null ? 0 : this.markupAttrs.markupCategorySuggestion.length > 0 ? 1 : 2}">
			<mx:dataProvider>
				<mx:Object label="Search..." icon="{Utils.SEARCH_ICON_CLASS}"/>
				<mx:Object label="Suggest..." icon="{Utils.PENCIL_ICON_CLASS}"/>
				<mx:Object label="None"/>
			</mx:dataProvider>
		</mx:ToggleButtonBar>		
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:Spacer width="50%" height="100%"/>
		</mx:HBox>
		<mx:Label text="Additional concepts (comma-separated)" width="300" paddingTop="5"/>
		<mx:TextInput id="additionalConceptsTextInput" width="100%" editable="true" text="{this.markupAttrs.additionalConcepts.toString()}" enter="{updateAdditionalTags()}" focusOut="{updateAdditionalTags()}"/>
		<mx:VBox width="100%" height="100%" verticalGap="0" horizontalAlign="center">
			<mx:Label text="Content summary" width="100%"/>
			<mx:TextArea id="summaryTextArea" width="100%" height="50%" minHeight="32" text="{this.markupAttrs.summary}" focusOut="summaryChanged()"/>
			<mx:Label width="100%" textAlign="left" text="Comments"/>
			<mx:TextArea id="commentTextArea" width="100%" height="50%" minHeight="32" text="{this.markupAttrs.comment}" focusOut="commentChanged()"/>
			<mx:HBox horizontalGap="20" paddingTop="5">
				<mx:Button id="revertButton" label="Revert Properties" enabled="{committedMarkupAttrs != null &amp;&amp; !markupAttrs.equals(committedMarkupAttrs)}" click="revertClicked()"/>
				<mx:Button id="removeButton" label="Remove Markup" click="removeClicked()"/>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
</mx:VBox>
