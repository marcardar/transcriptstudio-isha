<?xml version="1.0" encoding="utf-8"?>

<!--

   Transcript Markups Editor: An XML based application that allows users to define 
   and store contextual metadata for contiguous sections within a text document. 

   Copyright 2008 Mark Carter, Swami Kevala

   This file is part of Transcript Markups Editor.

   Transcript Markups Editor is free software: you can redistribute it and/or modify it 
   under the terms of the GNU General Public License as  published by the Free Software 
   Foundation, either version 3 of the License, or (at your option) any later version.

   Transcript Markups Editor is distributed in the hope that it will be useful, but 
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along with 
   Transcript Markups Editor. If not, see http://www.gnu.org/licenses/.

-->

<textNS:AbstractEditDialog xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:textNS="org.ishafoundation.archives.transcript.components.studio.text.*" title="Edit Paragraph" x="10" y="10" width="{0.8 * parentDocument.width}" height="{0.8 * parentDocument.height}" alpha="2.0" layout="vertical">
	<mx:Script>
    <![CDATA[
    	import mx.utils.StringUtil;
       	import mx.managers.PopUpManager;
       	
       	public static var OK_CLICKED:String = "OK_CLICKED";

		public override function set texts(newSegmentTexts:Array):void {
			var multiSegmentText:String = "";
			for each (var segmentText:String in newSegmentTexts) {
				if (multiSegmentText.length > 0) {
					multiSegmentText += "\r\r";
				}
				multiSegmentText += segmentText;
			}
			textArea.text = multiSegmentText;
		}
       	
       	public override function get texts():Array {
			var result:Array = new Array();
			var newSegmentTexts:Array = textArea.text.split("\r");
			for each (var newSegmentText:String in newSegmentTexts) {
				newSegmentText = StringUtil.trim(newSegmentText);
				if (newSegmentText.length > 0) {
					result.push(newSegmentText);
				}
			} 
       		return result;
       	}
       	
		private function okClicked(event:Event):void {
			dispatchEvent(new Event(OK_CLICKED));
			closeMe();
		}
		
		private function closeMe():void {
        	PopUpManager.removePopUp(this);
		}
		
    ]]>
	</mx:Script>
	<mx:TextArea id="textArea" height="100%" width="100%"/>
	<mx:HBox width="100%" horizontalAlign="center">
		<mx:Button id="okButton" label="OK" click="okClicked(event)" enabled="{StringUtil.trim(textArea.text).length > 0}"/>
		<mx:Button label="Cancel" click="closeMe()"/>		
	</mx:HBox>
</textNS:AbstractEditDialog>
