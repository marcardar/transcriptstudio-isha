<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="470" height="600" horizontalAlign="center" title="Create Event" creationComplete="init()" xmlns:importer="org.ishafoundation.archives.transcript.components.studio.importer.*">
	<mx:Script>
	<![CDATA[
		import org.ishafoundation.archives.transcript.db.DatabaseManager;
		import mx.events.FlexEvent;
		import org.ishafoundation.archives.transcript.db.XQueryExecutor;
		import org.ishafoundation.archives.transcript.model.ReferenceManager;
		import org.ishafoundation.archives.transcript.db.DatabaseConstants;
		import org.ishafoundation.archives.transcript.importer.MSWordImporter;
		import mx.core.Container;
		import org.ishafoundation.archives.transcript.db.XMLStorer;
		import org.ishafoundation.archives.transcript.model.EventProperties;
		import mx.events.PropertyChangeEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.ishafoundation.archives.transcript.model.SessionProperties;
		import org.ishafoundation.archives.transcript.fs.EventFile;
		import org.ishafoundation.archives.transcript.fs.DbFileSystem;
		import org.ishafoundation.archives.transcript.fs.File;
		import org.ishafoundation.archives.transcript.fs.Collection;
		import name.carter.mark.flex.util.XMLUtils;
		import name.carter.mark.flex.util.Utils;
		import mx.managers.CursorManager;
		import name.carter.mark.flex.util.Utils;
		import mx.utils.StringUtil;
		import name.carter.mark.flex.util.collection.HashSet;
		import name.carter.mark.flex.util.collection.ISet;
		import org.ishafoundation.archives.transcript.util.IdUtils;
		import mx.formatters.DateFormatter;
		import mx.collections.ArrayCollection;
		import mx.formatters.DateBase;
		import mx.controls.TextInput;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		
	   	public static const EVENT_CREATED:String = "EVENT_CREATED";
	   	
	   	public var databaseMgr:DatabaseManager;
	   	
	   	[Bindable]
	   	public var referenceMgr:ReferenceManager;
	   	
		private var _fileSystem:DbFileSystem;

		public var eventFile:EventFile;
	
		public static function display(parent:DisplayObject, fileSystem:DbFileSystem, databaseMgr:DatabaseManager, referenceMgr:ReferenceManager, eventProps:EventProperties = null):EventCreateDialog {
			var result:EventCreateDialog = new EventCreateDialog();
			result.databaseMgr = databaseMgr;
			result.referenceMgr = referenceMgr;
			PopUpManager.addPopUp(result, parent, true);
			result.fileSystem = fileSystem;
			result.addEventListener(FlexEvent.CREATION_COMPLETE, function(evt:FlexEvent):void {
				result.eventPropertiesPane.eventProps = eventProps;
			});
			return result;
		}
	
		private function init():void {
		}
		
		[Bindable]
		public function set fileSystem(fileSystem:DbFileSystem):void {
			_fileSystem = fileSystem;
			eventPropertiesPane.fileSystem = fileSystem;
		}
		
		public function get fileSystem():DbFileSystem {
			return _fileSystem;
		}
		
		private function get eventProps():EventProperties {
			return eventPropertiesPane.eventProps;
		}
		
		private function get8DigitDate():String {
			if (eventProps.startAt == null) {
				return null;
			}
			var startAtDate:Date = eventProps.startAt;
			var fixWidth:Function = EventPropertiesPane.fixWidth;
			var result:String = startAtDate.fullYear + fixWidth(startAtDate.month + 1, 2) + fixWidth(startAtDate.date, 2);
			return result;
		}
		
		private function createEvent(evt:MouseEvent):void {
			// need to generate a new ID
			populateId(function():void {
				// need to create the new event file
				var collection:Collection = eventPropertiesPane.collectionChooserTree.selectedItem as Collection;
				var filename:String = eventPropertiesPane.eventProps.generateFilename();
				var eventPath:String = collection.path + "/" + filename;
				databaseMgr.storeXML(eventPath, eventPropertiesPane.eventProps.eventElement, function():void {
					fileSystem.refresh(collection.path, function():void {
						closeMe();
						var evt:Event = new Event(EVENT_CREATED);
						dispatchEvent(evt);
					}, function(msg:String):void {
						throw new Error("Could not refresh collection: " + collection.path + ": " + msg);
					});
				}, function (msg:String):void {
					throw new Error("Could not save event file '" + eventPath + "': " + msg);
				});
			}, function(msg:String):void {
				throw new Error("Could not create new event id: " + msg);
			});
		}
		
		private function populateId(successFunc:Function, failureFunc:Function):void {
			var eventDate:String = Utils.getDateString(eventProps.startAt);
			this.databaseMgr.executeStoredXQuery("create-event-id.xql", {eventDate:eventDate, eventType:eventProps.type}, function(returnVal:String):void {
				eventProps.id = returnVal;
				successFunc();
			}, failureFunc);
		}
			
		private function okClicked(evt:MouseEvent):void {
			createEvent(evt);
		}
		
		private function closeMe():void {
			PopUpManager.removePopUp(this);
		}
	]]>
	</mx:Script>
	
	<importer:EventPropertiesPane id="eventPropertiesPane" label="Event Properties" width="100%" height="100%" referenceMgr="{referenceMgr}"/>
	<mx:HBox id="buttonBox">
		<mx:Button label="OK" enabled="{eventPropertiesPane.ready}" click="okClicked(event)" />
		<mx:Button label="Cancel" click="closeMe()"/>
	</mx:HBox>
	
</mx:TitleWindow>
