<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()">
	<mx:Script>
	<![CDATA[
		import name.carter.mark.flex.util.Utils;
		import mx.controls.Alert;
		import org.ishafoundation.archives.transcript.model.MTagImpl;
		import mx.utils.StringUtil;
		import name.carter.mark.flex.util.icon.IconUtils;
		import mx.managers.PopUpManager;
		import org.ishafoundation.archives.transcript.model.ReferenceManager;
		import name.carter.mark.flex.util.collection.HashSet;
		import name.carter.mark.flex.util.collection.ISet;
		import mx.collections.ArrayCollection;
		
		public static const CATEGORY_EDIT_EVENT:String = "CATEGORY_EDIT_EVENT";
		
		[Bindable]
		public var referenceMgr:ReferenceManager;
		public var selectedCategoryId:String;
				
		private var alreadySearched:Boolean = false;		
		public var initialCategoryId:String = null;
    	
		private function init():void {
			if (initialCategoryId != null) {
				performAutoSearch(initialCategoryId);
			}
		}

    	private function selectionChanged():void {
    		this.selectedCategoryId = resultsList.selectedItem as String;
    	}
    	
    	internal function searchClicked():void {
    		var searchTermArray:Array = searchTextInput.text.split(" ");
    		var searchTerms:ISet = new HashSet();
    		for each (var searchTerm:String in searchTermArray) {
    			var s:String = StringUtil.trim(searchTerm);
    			if (s.length > 0) {
    				searchTerms.add(s);
    			}
    		}
    		var categoryTypeId:String = typeComboBox.selectedItem.toString();
    		if (categoryTypeId != "all") {
	    		searchTerms.add(new MTagImpl("type", categoryTypeId));
	    	}
	    	var results:Array;
	    	if (searchTerms.size() == 0) {
	    		trace("Getting all categories"); 
	    		results = this.referenceMgr.getAllCategories();
	    	}
	    	else {
	    		trace("Using search terms: " + searchTerms);
				results = this.referenceMgr.searchCategories(searchTerms);
	    	}
			resultsList.dataProvider = new ArrayCollection(results);
    	}

		private function dispatchCategoryEditEvent():void {
			dispatchEvent(new Event(CATEGORY_EDIT_EVENT));
		}

		private function editClicked(newCategory:Boolean):void {
			var categoryEditDialog:CategoryEditDialog = CategoryEditDialog.createInstance(this.referenceMgr);
            PopUpManager.addPopUp(categoryEditDialog, this, true);
           	var categoryId:String = newCategory ? null : resultsList.selectedItem as String;
            categoryEditDialog.title = newCategory ? "Create new category" : "Edit category";
            if (!newCategory) {
            	categoryEditDialog.nameTextInput.text = this.referenceMgr.getCategoryName(categoryId);
            	categoryEditDialog.typeIds = new ArrayCollection(this.referenceMgr.getCategoryTypeIdsForCategoryId(categoryId));
            	categoryEditDialog.concepts = new ArrayCollection(this.referenceMgr.getConceptsForCategoryId(categoryId));
            }
			categoryEditDialog.okButton.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
				if (categoryEditDialog.nameTextInput.text == null) {
					// dialog was cancelled so nothing to do
					return;
				}
				var categoryName:String = Utils.normalizeSpace(categoryEditDialog.nameTextInput.text);
				if (newCategory && !referenceMgr.isNewCategoryNameValid(categoryName)) {
					Alert.show("Category name already in use: " + categoryName);
					return;
				}
				// this is a valid category name, so we can close the dialog and continue updating reference file
				categoryEditDialog.closeMe();
				var typeIds:Array = categoryEditDialog.typeIds.toArray();
				var concepts:Array = categoryEditDialog.concepts.toArray();
				var categoryElement:XML = referenceMgr.editCategory(categoryName, typeIds, concepts, categoryId);
				referenceMgr.storeReferences(function():void {
					if (newCategory) {
						Alert.show("New category successfully saved");
					}
					else {
						Alert.show("Predefined category successfully edited");						
					}
					var categoryId:String = categoryElement.@id;
					performAutoSearch(categoryId);
					dispatchCategoryEditEvent();
				}, function(msg:String):void {
					Alert.show("Could not save changes because: " + msg);
				});
				if (alreadySearched) {
					searchClicked();
					resultsList.validateDisplayList();
					// try to select this category in the results list
					resultsList.selectedItem = categoryElement.@id.toString();
				}
			}); 
		}
		
		private function performAutoSearch(categoryId:String):void {
			resultsList.dataProvider = new ArrayCollection([categoryId]);
			selectedCategoryId = categoryId;
			var categoryTypeIds:Array = referenceMgr.getCategoryTypeIdsForCategoryId(categoryId);
			if (categoryTypeIds.length > 1) {
				typeComboBox.selectedIndex = 0;
			}
			else {
				typeComboBox.selectedItem = categoryTypeIds[0];
			}
			var searchString:String = "";
			for each (var concept:String in referenceMgr.getConceptsForCategoryId(categoryId)) {
				if (searchString.length > 0) {
					searchString += " ";
				}
				searchString += concept;
			}
			searchTextInput.text = searchString;
			searchClicked();
			callLater(function():void {
				resultsList.selectedItem = categoryId;
			});			
		}

		private static function getCategoryTypeIdsForComboBox(referenceMgr:ReferenceManager):ArrayCollection {
			var result:ArrayCollection = new ArrayCollection(referenceMgr.getCategoryTypeIds(true, true));
			result.addItemAt("all", 0);
			return result;
		}
		
		private function comboBoxLabelFunc(categoryTypeId:String):String {
			if (categoryTypeId == "all") {
				return "All";
			}
			else {
				return this.referenceMgr.getCategoryTypeNameFromId(categoryTypeId);
			}
		}
		
    	private function resultLabelFunc(categoryId:String):String {
    		var result:String = this.referenceMgr.getCategoryName(categoryId);
    		var tags:Array = this.referenceMgr.getConceptsForCategoryId(categoryId);
    		if (tags.length > 0) {
    			result += " [" + tags.join(' ') + "]";
    		}
    		return result;
    	}
    	
		private function getIconFunc():Function {
			return IconUtils.getIconFunctionForDataRenderer(resultsList, function(categoryId:String):String {
				var catTypeId:String = referenceMgr.getCategoryTypeIdForCategoryId(categoryId);
				var iconPath:String = Utils.getIconPath(catTypeId);
				return iconPath;				
			}, 16, 16, Utils.DEFAULT_ICON_CLASS);
		}

	]]>
	</mx:Script>
	<mx:VBox width="100%" height="100%">
		<mx:HBox width="100%">
			<mx:ComboBox id="typeComboBox" labelFunction="comboBoxLabelFunc" dataProvider="{getCategoryTypeIdsForComboBox(this.referenceMgr)}"/>
			<mx:TextInput width="100%" id="searchTextInput" restrict="a-z0-9\-" enter="searchClicked()"/>
			<mx:Button label="Search" id="searchButton" click="searchClicked()" width="80"/>			
		</mx:HBox>
		<mx:HBox width="100%" height="100%">
			<mx:List width="100%" height="100%" id="resultsList" horizontalScrollPolicy="auto" allowMultipleSelection="false" labelFunction="resultLabelFunc" iconFunction="{getIconFunc()}" change="selectionChanged()"/>		
		</mx:HBox>
	</mx:VBox>
	<mx:VBox height="100%" horizontalAlign="center" verticalAlign="middle">
		<mx:Button label="Add..." width="80" click="editClicked(true)"/>
		<mx:Button label="Edit..." width="80" enabled="{resultsList.selectedIndex &gt;= 0}" click="editClicked(false)"/>
		<mx:Button label="Remove" width="80" enabled="{false &amp;&amp; resultsList.selectedIndex &gt;= 0}"/>
	</mx:VBox>
</mx:HBox>
