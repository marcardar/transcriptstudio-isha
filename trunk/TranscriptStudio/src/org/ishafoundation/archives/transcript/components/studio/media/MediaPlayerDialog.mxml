<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" horizontalAlign="center" title="Video Player" creationComplete="init()">
	<mx:Script>
    <![CDATA[
    	import mx.collections.ArrayCollection;
    	import org.ishafoundation.archives.transcript.db.DatabaseConstants;
    	import flash.utils.getTimer;
    	import flash.net.sendToURL;
    	import mx.managers.PopUpManager;
    	import mx.core.UIComponent;
		import com.jeroenwijering.events.*;
		import mx.events.ResizeEvent;

		[Bindable]
		/* Pass FlashVars to the Player here.  Player.swf should be in the source root of your Flex application */
		private var file:String = "player.swf?autostart=true&controlbar=over&resizing=false";

		private var playerObject : Object;
		private var seek:Boolean = true;
		private var pause:Boolean = true;
		private var start:int = 1000;
		
		public var devicesElement:XML;
		
		private static const dummyDevicesElement:XML =
			<session>
				<devices>
					<device id="mixer"> <!-- n124.mp3 -->
						<stream id="default" type="audio" quality="good"/>
						<media id="n124">
							<syncPoint id="sp1" timecode="15"/>
							<syncPoint id="sp2" timecode="17"/>
						</media>
					</device>				
					<device id="main-cam"> <!-- n224.mp4, n224_lapel-mic.mp3, n224_open-mic.mp3 -->
						<stream id="default" type="video" quality="good"/>
						<stream id="lapel-mic" type="audio" quality="good"/>
						<stream id="open-mic" type="audio" quality="poor"/>
						<media id="n866">
						</media>
					</device>				
				</devices>
			</session>;
		
		private function init():void {
			// some dummy data
			this.devicesElement = dummyDevicesElement;
			this.mediaFilenames = new ArrayCollection();
			for each (var deviceElement:XML in this.devicesElement.devices.device) {
				for each (var streamElement:XML in deviceElement.stream) { 
					var streamId:String = streamElement.@id;
					var extension:String = streamElement.@type.toString() == "video" ? "mp4" : "mp3";
					for each (var mediaElement:XML in deviceElement.media) {
						var mediaId:String = mediaElement.@id;
						var mediaFilename:String = getMediaFilenameWithoutExtension(mediaId, streamId) + "." + extension;
						var mediaItem:Object = {filename:mediaFilename, mediaId:mediaId, streamId:streamId, type:streamElement.@type.toString()};
						this.mediaFilenames.addItem(mediaItem);
					}
				}
			}
		}
		
		private static function getMediaFilenameWithoutExtension(mediaId:String, streamId:String):String {
			var result:String = mediaId + (streamId == null || streamId == "default" ? "" : "_" + streamId);
			return result;			
		}
		
		public function play(mediaId:String, streamId:String, start:int = -1, end:int = -1):void {
			var mediaItem:Object = searchMediaItem(mediaId, streamId);
			var mediaURL:String = DatabaseConstants.EXIST_URL + "/archives/transcript/media/" + mediaItem.filename;
			var mediaType:String = mediaItem.type;
			playerObject.view.sendEvent(ViewEvent.LOAD, mediaURL);			 
		}
		
		private function searchMediaItem(mediaId:String, streamId:String):Object {
			for each (var mediaItem:Object in mediaFilenames) {
				if (mediaItem.mediaId == mediaId && mediaItem.streamId == streamId) {
					return mediaItem;
				}
			}
			return null;
		}
		
		/* This method is called when the SWFLoader has completed its loading and the Player has been initialized.  Due
		    to timing issues, we have to check whether the player's view has been loaded or not.  If not, listen to the 
		    Player's new PlayerEvent.READY event.
		 */
		private function loaderFinished(e:Event) : void {
			playerObject = e.target.content as Object;

			if(playerObject.view == null) {
				playerObject.addEventListener(PlayerEvent.READY, this.playerReady);
			} else {
				playerReady();
			}
		}
		
		public function set mediaFilenames(mediaFilenames:ArrayCollection):void {
			mediaComboBox.dataProvider = mediaFilenames;
		}
		
		public function get mediaFilenames():ArrayCollection {
			return mediaComboBox.dataProvider as ArrayCollection;
		}
		
		private function mediaChangeHandler():void {
			trace(mediaComboBox.selectedItem);
			play(mediaComboBox.selectedItem.mediaId, mediaComboBox.selectedItem.streamId);
		}
		
		/* Once the Player has been initialized, we can begin to send and receive events from it */
		private function playerReady(e:Event=null) : void {
			// Wait for the view to load the file.
			trace(getTimer() + ": Player ready");
			playerObject.view.addViewListener(ViewEvent.LOAD, loadHandler);
			playerObject.view.addModelListener(ModelEvent.LOADED, loadedHandler);
			playerObject.view.addModelListener(ModelEvent.BUFFER, bufferHandler);
			
			// Set the player screen to the correct dimensions.
			resizePlayer();
		} 
		
		/* The event loading the file has fired, we can now start the video playback. */
		private function loadHandler(e:Event=null):void {
			trace(getTimer() + ": Load");				

			playerObject.view.addModelListener(ModelEvent.TIME, timeHandler);
			//seekHandler();
			/*playerObject.view.addViewListener(ViewEvent.PLAY, playHandler);
			playerObject.view.sendEvent(ViewEvent.PLAY, true);
			playerObject.view.sendEvent("scrub", 5);*/
			//playerObject.view.sendEvent(ViewEvent.PLAY, true);
		}
		
		private function bufferHandler(e:ModelEvent):void {
			trace(getTimer() + ": Buffer");
		}
		
		/* The event loading the file has fired, we can now start the video playback. */
		private function loadedHandler(e:ModelEvent=null):void {
			trace(getTimer() + ": Loaded: " + (e as ModelEvent).data["loaded"] + " bytes");
		}
		
		private function playHandler(e:Event = null):void {
			trace(getTimer() + ": play event: " + e);
			//playerObject.view.sendEvent(ViewEvent.PLAY, true);
		}

		private function seekHandler(e:Event = null):void {
			trace(getTimer() + ": seek event: " + e);
		}
		
		/* To resize the player, simply set its width and height, and send the view a ViewEvent.REDRAW event. */
		private function resizePlayer() : void {
			if(playerObject != null && playerObject.view != null) {
				playerObject.config['width'] = player.width;
				playerObject.config['height'] = player.height;
				playerObject.view.sendEvent(ViewEvent.REDRAW);
			}

		}

		/* Respond to time events */
		private function timeHandler(me:ModelEvent) : void {
			if (me.data.position > 0) {
				seekIfNecessary();
			}
			if(me.data.position > 3.0) {
				// Pause the video after 3 seconds)
				//playerObject.view.sendEvent(ViewEvent.PLAY, false);
			}
			
			//timelabel.text = "Time tracker: " + me.data.position;
		}
		
		private function seekIfNecessary():void {
			// && (true || me.data["loaded"] > 90000 * start
			if (seek) {
				trace("Seeking to: " + start);
				playerObject.view.addViewListener(ViewEvent.SEEK, seekHandler);
				playerObject.view.sendEvent(ViewEvent.SEEK, start);
				//playerObject.view.sendEvent(ViewEvent.MUTE, false);
				seek = false;
			}			
		}
    	
    	public static function display(parent:DisplayObject):MediaPlayerDialog {
    		var result:MediaPlayerDialog = new MediaPlayerDialog();
			PopUpManager.addPopUp(result, parent, true);
			return result;
    	}
    
		private function closeMe():void {
        	PopUpManager.removePopUp(this);
		}
		
		private function skipClicked():void {
			playerObject.view.sendEvent(ViewEvent.SEEK, 5);
		}		
    ]]>
	</mx:Script>
	<mx:ComboBox id="mediaComboBox" change="mediaChangeHandler()" labelField="filename"/>
	<!-- Load the Player's SWF here.  Make sure to turn off the aspect ratio and scaling properties. -->
	<mx:SWFLoader id="player" source="{file}"
		maintainAspectRatio="false" scaleContent="false" 
		width="100%" height="100%" minHeight="200"
		init="loaderFinished(event);"
		resize="resizePlayer();">
	</mx:SWFLoader>
	<!--mx:Text text="Time tracker" id="timelabel" /-->

	<mx:HBox>
		<!--mx:Button label="Skip" id="skipButton" click="skipClicked()"/-->
		<mx:Button label="OK" id="okButton" click="closeMe()"/>		
	</mx:HBox>
</mx:TitleWindow>
