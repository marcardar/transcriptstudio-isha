<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" minWidth="500" minHeight="200" initialize="init()">
	<mx:Script>
	<![CDATA[
		import org.ishafoundation.archives.transcript.model.TranscriptTextSelection;
		import name.carter.mark.flex.util.Utils;
		import name.carter.mark.flex.project.mdoc.MContentRangeSubset;
		import name.carter.mark.flex.project.mdoc.MSegmentSubset;
		import name.carter.mark.flex.project.mdoc.MUtils;
		import name.carter.mark.flex.project.mdoc.MSuperNode;
		import name.carter.mark.flex.project.mdoc.TaggableMNode;
		import name.carter.mark.flex.project.mdoc.MContent;
		import name.carter.mark.flex.project.mdoc.MSegment;
		import name.carter.mark.flex.project.mdoc.MSuperContent;
		import name.carter.mark.flex.project.mdoc.MContentRange;
		import name.carter.mark.flex.project.mdoc.MSuperSegment;
		import name.carter.mark.flex.project.mdoc.MNode;
		import name.carter.mark.flex.project.mdoc.MSegmentRange;
		import mx.controls.textClasses.TextRange;
		import org.ishafoundation.archives.transcript.model.Transcript;
		import mx.controls.Text;
		import mx.effects.easing.Quadratic;
		import mx.effects.easing.Linear;
		import mx.effects.easing.Exponential;
		import flash.events.Event;
		import flash.events.KeyboardEvent;
		import flash.events.MouseEvent;
		import flash.text.StyleSheet;
		import flash.text.TextField;
		import flash.utils.ByteArray;
		
		import mx.containers.Canvas;
		import mx.controls.TextArea;
		import mx.core.UITextField;
		import mx.effects.AnimateProperty;
		import mx.events.EffectEvent;
		import mx.utils.StringUtil;
		
		import org.ishafoundation.archives.transcript.model.ReferenceManager;
		
		[Embed(source="/../conf/transcriptTextArea.css",mimeType="application/octet-stream")]
		private static const StyleSheetClass:Class;
		private static const STYLE_SHEET:StyleSheet = Utils.getStyleSheet(StyleSheetClass);

		public static var ICONS_ENABLED:Boolean = true;
		public static const SELECTION_CHANGE_EVENT:String = "SELECTION_CHANGE_EVENT";
		private static const SCROLL_DURATION_IN_MILLIS:Number = 500;
		private static const MIN_SCROLL_SPEED:int = 50; // lines per second

		private var scrollEffect:AnimateProperty;
		private var scrollEffectEndFunc:Function; // takes no args
		
		public var referenceMgr:ReferenceManager;
		private var _transcript:Transcript;
		public var transcriptTextAreaMapping:Array;
		
		private var _ttSelection:TranscriptTextSelection;

		private function init():void {
			this.scrollEffect = new AnimateProperty(this.wrappedTextArea)
			this.scrollEffect.easingFunction = Quadratic.easeInOut;
			this.scrollEffect.addEventListener(EffectEvent.EFFECT_END, function(evt:EffectEvent):void {
				if (scrollEffectEndFunc != null) {
					scrollEffectEndFunc();
					scrollEffectEndFunc = null; // don't let it run twice
				}
			});
			this.textField.alwaysShowSelection = true;
			this.textField.useRichTextClipboard = false;
		}
		
		private var nextIndex:int = 0;
		public function highlightHTMLElements():void {
			if (nextIndex == transcriptTextAreaMapping.length) {
				nextIndex = 0;
			}
			var ttaRange:TranscriptTextAreaRange = transcriptTextAreaMapping[nextIndex++];
			var range:TextRange = new TextRange(this.wrappedTextArea, true, ttaRange.beginIndex, ttaRange.endIndex);
			range.color = 0x0000FF;
		}
		
		/*public function decorateConfidentialSegments():void {
			var highlighter:Highlighter = new Highlighter(textField);
			//highlighter.boundariesToHighlight.push(new StringBoundaries(Utils.getTextField(wrappedTextArea), 20, 50));
			for each (var segmentElement:XML in transcript.transcriptXML..segment.(hasOwnProperty("@confidential") && @confidential == "true")) {
				var confidentialSegment:MSegment = transcript.mdoc.resolveElement(segmentElement) as MSegment;
				var beginIndex:int = getStartIndex(confidentialSegment.contentRange.first.id);
				var endIndex:int = getEndIndex(confidentialSegment.contentRange.last.id);
				var range:TextRange = new TextRange(this.wrappedTextArea, false, beginIndex, endIndex);
				var boundaries:StringBoundaries = new StringBoundaries(textField, beginIndex, endIndex);
				highlighter.boundariesToHighlight.push(boundaries);
			}
			highlighter.highlightVisibleBoundaries();
		}*/
		
		private function get textField():TextField {
			return Utils.getTextField(this.wrappedTextArea);
		}
		
		/**
		 * Set the selection in the text area
		 *
		 * Does not trigger change events because not user-driven.
		 */
		private function setSelection(newSelectionBeginIndex:int, newSelectionEndIndex:int):void {
			trace("Setting selectionBegin/EndIndex: " + newSelectionBeginIndex + "-" + newSelectionEndIndex);
			this.wrappedTextArea.selectionBeginIndex = newSelectionBeginIndex;
			this.wrappedTextArea.selectionEndIndex = newSelectionEndIndex;
		}
		
		public function set transcript(transcript:Transcript):void {
			this._transcript = transcript;
			this.wrappedTextArea.verticalScrollPosition = 0;
			redraw();
		}
		
		public function set ttSelection(newTtaSelection:TranscriptTextSelection):void {
			/*
			 * Dont care if it is already set to the same thing for two reasons:
			 * 1. The text might have changed and so therefore the start/endIndex of the selection may need to change too.
			 * 2. The newTtaSelection may be the same object but with different internal values
			 *
			 * Essentially, this method is most likely to be called with something new anyway. Also it will not trigger
			 * selectionChangeHandler which should avoid any cyclic recursion
			 */
			trace("New selection: " + newTtaSelection);
			this._ttSelection = newTtaSelection;
			setSelectionBasedOnSelectionInfo(); // this is necessary because of auto-expansion when creating selection obj
		}
		
		[Bindable]
		public function get ttSelection():TranscriptTextSelection {
			return this._ttSelection;
		}
		
		private function setSelectionBasedOnSelectionInfo():void {
			if (this.ttSelection == null) {
				// we want to make a blank selection but must be careful that we blank-selected somewhere
				// already in the view so there is no autoscroll
				var lineIndex:int = Utils.getFirstVisibleLineIndex(this.wrappedTextArea);
				var charIndex:int = textField.getLineOffset(lineIndex);
				setSelection(charIndex, charIndex); // zero length selection at start of existing selection
				return;
			}
			var beginIndex:int;
			var endIndex:int;
			if (this.ttSelection.selectedObj is MSuperSegment) {
				// only select the header
				beginIndex = getStartIndex(this.ttSelection.toSuperNode().id);
				var firstTtaRange:TranscriptTextAreaRange = getFirstTtaRangeForNodeId(this.ttSelection.toSuperNode().id);
				endIndex = firstTtaRange.endIndex; 					
			}
			else if (this.ttSelection.toSegmentRange() != null) {
				beginIndex = getStartIndex(this.ttSelection.toSegmentRange().first.id);
				endIndex = getEndIndex(this.ttSelection.toSegmentRange().last.id);
			}
			else {
				// segment subset - must be less than one segment so need to take care of the offsets
				var contentRangeSubset:MContentRangeSubset = this.ttSelection.toSegmentSubset().toContentRangeSubset();
				beginIndex = getStartIndex(contentRangeSubset.spanningContentRange.first.id) + contentRangeSubset.startOffsetRelativeToFirstContent;
				endIndex = getStartIndex(contentRangeSubset.spanningContentRange.last.id) + contentRangeSubset.endOffsetRelativeToLastContent;
			}
			trace("Calculated text area selection: " + beginIndex + "-" + endIndex);
			setSelection(beginIndex, endIndex);
		}
		
		// note - this will not be called if the mouse up happens outside the app area
		private function handleMouseUp(event:Event):void {
			//trace("Detected mouse up after mouse down in transcripttextarea");
			systemManager.removeEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
			selectionChangeHandler();
		}
		
		private function handleMouseDown(event:MouseEvent):void {
			if (event.target is UITextField) { // is this necessary?
				if (event.target != this.textField) {
					throw Error("mouse down event came from a different text field!");
				}
				systemManager.addEventListener(MouseEvent.MOUSE_UP, handleMouseUp);
			}
		}
		
		private function handleKeyUp(event:Event):void {
			selectionChangeHandler();			
		}
		
		/**
		 * This should only be called if the selection is changed through user input (mouse or keyboard).
		 * DO NOT call if changed programmatically.
		 */
		private function selectionChangeHandler():void {
			this.ttSelection = calculateSelectionInfo(this.wrappedTextArea.selectionBeginIndex, this.wrappedTextArea.selectionEndIndex);
			this.wrappedTextArea.setFocus();
			dispatchEvent(new Event(SELECTION_CHANGE_EVENT));
		}
		
		internal function redrawThenSelectMarkup(markup:MSuperNode): void {
			var newSelectionInfo:TranscriptTextSelection = TranscriptTextSelection.createSuperNodeInstance(markup);
			ttSelection = null; // without this the old value hangs around too long (because the new value is only set in a callLater)
			redraw(newSelectionInfo);
		}
		
		/**
		 * id could be segment id or markup id.
		 */
		private function redraw(newSelectionInfo:TranscriptTextSelection = null):void {
			if (this._transcript == null) {
				this.wrappedTextArea.htmlText = <body/>;
				return;
			}
			trace("Redrawing text area");
			var oldVerticalScrollPosition:int = this.wrappedTextArea.verticalScrollPosition;
			var builder:TranscriptHTMLBuilder = new TranscriptHTMLBuilder(this._transcript, ICONS_ENABLED);			
			var transcriptHTML:XML = builder.transcriptHTML;
			this.transcriptTextAreaMapping = builder.transcriptTextAreaMapping;
			this.wrappedTextArea.htmlText = transcriptHTML;
			this.wrappedTextArea.callLater(function():void { // callLater is important, otherwise the vertical position cannot be set
				//decorateConfidentialSegments();
				wrappedTextArea.verticalScrollPosition = oldVerticalScrollPosition;
				if (newSelectionInfo == null) {
					ttSelection = null;
				}
				else if (newSelectionInfo.toSuperNode() != null) {
					// this is a markup id - text does not change much for a markup event, so don't adjust scroll position
					wrappedTextArea.verticalScrollPosition = oldVerticalScrollPosition;
					// only select the markup if its visible - because we don't want to scroll unnecessarily
					if (isMarkupStartVisible(newSelectionInfo.toSuperNode().id)) {
						select(newSelectionInfo);
					}
					else {
						ttSelection = null;
					}
				}
				else {
					// we are redrawing because of an action on some text - so always show selection
					select(newSelectionInfo);
				}
			});
		}
		
		private function isMarkupStartVisible(markupId:String):Boolean {
			return isTtaRangeStartVisible(getFirstTtaRangeForNodeId(markupId));			
		}
		
		private function isTtaRangeStartVisible(ttaRange:TranscriptTextAreaRange):Boolean {
			return isCharIndexVisible(ttaRange.beginIndex);
		}

		private function isCharIndexVisible(charIndex:int):Boolean {
			var lineIndex:int = textField.getLineIndexOfChar(charIndex);
			return lineIndex >= Utils.getFirstVisibleLineIndex(this.wrappedTextArea) && lineIndex <= Utils.getLastVisibleLineIndex(this.wrappedTextArea);
		}
		
		public function selectMarkup(markup:MSuperNode):void {
			select(TranscriptTextSelection.createSuperNodeInstance(markup));
		}
		
		private function select(newTtaSelection:TranscriptTextSelection):void {
			if (newTtaSelection == null) {
				return;
			}
			var firstIndexToSelect:int;
			var lastIndexToSelect:int;

			// the top line is sometimes not visible (so add one)
			var visibleLinesStartIndex:int = Utils.getFirstVisibleLineIndex(this.wrappedTextArea) + 1;
			// the bottom line is sometimes not visible (so minus one)
			var visibleLinesEndIndex:int = (Utils.getLastVisibleLineIndex(this.wrappedTextArea) + 1) - 1;
			var numVisibleLines:int = visibleLinesEndIndex - visibleLinesStartIndex;
			
			var linesToDisplayStartIndex:int
			var linesToDisplayEndIndex:int;
			
			var preferableLinesToDisplayStartIndex:int;
			var preferableLinesToDisplayEndIndex:int;
			
			if (newTtaSelection.selectedObj is MSuperSegment) {
				// just select the header
				var ttaRange:TranscriptTextAreaRange = getFirstTtaRangeForNodeId(newTtaSelection.toSuperNode().id);
				firstIndexToSelect = ttaRange.beginIndex;
				linesToDisplayStartIndex = textField.getLineIndexOfChar(firstIndexToSelect);
				lastIndexToSelect = ttaRange.endIndex;
				linesToDisplayEndIndex = (textField.getLineIndexOfChar(lastIndexToSelect) + 1) + 3; // show at least a few lines after
				preferableLinesToDisplayStartIndex = linesToDisplayStartIndex - 5;
				preferableLinesToDisplayEndIndex = linesToDisplayEndIndex + numVisibleLines / 3; // show the markup in the next third of the page				
			}
			else if (newTtaSelection.isTextSelected()) {
				var beginIndex:int, endIndex:int;
				if (newTtaSelection.toSegmentRange() != null) {
					beginIndex = getStartIndex(newTtaSelection.toSegmentRange().first.id);
					endIndex = getStartIndex(newTtaSelection.toSegmentRange().last.id);
				}
				else if (newTtaSelection.toSegmentSubset() != null) {
					var contentRange:MContentRange = newTtaSelection.toSegmentSubset().spanningContentRange;
					beginIndex = getStartIndex(contentRange.first.id) + newTtaSelection.toSegmentSubset().toContentRangeSubset().startOffsetRelativeToFirstContent;
					endIndex = getStartIndex(contentRange.last.id) + newTtaSelection.toSegmentSubset().toContentRangeSubset().endOffsetRelativeToLastContent;
				}
				else {
					throw new Error("Invalid state");
				}
				linesToDisplayStartIndex = this.textField.getLineIndexOfChar(beginIndex);
				linesToDisplayEndIndex = this.textField.getLineIndexOfChar(endIndex);
				preferableLinesToDisplayStartIndex = linesToDisplayStartIndex - 2;
				preferableLinesToDisplayEndIndex = linesToDisplayEndIndex + 2;				
			}
			else {
				throw new Error("Can this be reached?");
				this.ttSelection = null;
				return;
			}
			var newVerticalScrollPosition:int = this.wrappedTextArea.verticalScrollPosition;
			if (linesToDisplayEndIndex - linesToDisplayStartIndex >= numVisibleLines) {
				newVerticalScrollPosition = linesToDisplayStartIndex;
			}
			else {
				// manipulate the line index to display values according to preferred values and whether scroll up or down
				if (linesToDisplayStartIndex < visibleLinesStartIndex) {
					// need to scroll up - either so that bottom is actual or preferred
					if (preferableLinesToDisplayEndIndex - preferableLinesToDisplayStartIndex <= numVisibleLines) {
						// we can show the whole preferred
						newVerticalScrollPosition = preferableLinesToDisplayStartIndex;
					}
					else {
						newVerticalScrollPosition = linesToDisplayStartIndex;
					}
				}
				else if (linesToDisplayEndIndex > visibleLinesEndIndex) {
					// need to scroll down
					if (linesToDisplayStartIndex < visibleLinesEndIndex) {
						// already showing the start - so don't scroll more than necessary
						newVerticalScrollPosition = linesToDisplayEndIndex - numVisibleLines;
					}
					else if (preferableLinesToDisplayEndIndex - preferableLinesToDisplayStartIndex <= numVisibleLines) {
						newVerticalScrollPosition = preferableLinesToDisplayEndIndex - numVisibleLines;						
					}
					else {
						newVerticalScrollPosition = linesToDisplayEndIndex - numVisibleLines;
					}
				}	
			}
			if (newVerticalScrollPosition != this.wrappedTextArea.verticalScrollPosition) {
				// before we scroll and select - clear selection first
				this.ttSelection = null;
				verticalScrollToPosition(newVerticalScrollPosition, function():void {
					ttSelection = newTtaSelection;
				});
			}
			else {
				this.ttSelection = newTtaSelection;
			}
		}
		
		private function verticalScrollToPosition(newVerticalScrollPosition:int, nextFunc:Function, durationInMillis:Number = SCROLL_DURATION_IN_MILLIS):void {
			this.scrollEffectEndFunc = null;
			this.scrollEffect.stop(); // make sure there is nothing still running
			this.scrollEffectEndFunc = nextFunc;
			this.scrollEffect.property = "verticalScrollPosition";
			this.scrollEffect.toValue = newVerticalScrollPosition;
			var linesToScroll:int = Math.abs(newVerticalScrollPosition - this.wrappedTextArea.verticalScrollPosition);
			// don't go too slow
			this.scrollEffect.duration = Math.min(durationInMillis, (1000 * linesToScroll) / MIN_SCROLL_SPEED);
			this.scrollEffect.play();
		}
		
		private function getStartIndex(nodeId:String):int {
			var ttaRange:TranscriptTextAreaRange = getFirstTtaRangeForNodeId(nodeId);
			if (ttaRange == null) {
				return -1;
			}
			else {
				return ttaRange.beginIndex;
			}
		}
		
		private function getEndIndex(nodeId:String):int {
			var ttaRange:TranscriptTextAreaRange = getLastTtaRangeForNodeId(nodeId);
			if (ttaRange == null) {
				return -1;
			}
			else {
				return ttaRange.endIndex;
			}
		}
		
		/**
		 * node can be outlineElement, inlineElement, segmentElement or text node.
		 * 
		 * outline - the range for the header
		 * segment - the range containing the first char in the paragraph
		 * inline - the range containing the first char in this inline
		 * text - the range corresponding to this text node 
		 * 
		 * Otherwise null is returned. 
		 */
		private function getFirstTtaRangeForNodeId(nodeId:String):TranscriptTextAreaRange {
			return getFirstTtaRangeForNodeInternal(nodeId, transcriptTextAreaMapping);
		}
		
		/**
		 * For an outline this returns the text range for the last char in the outline - i.e. not just the header but the content too.
		 */
		private function getLastTtaRangeForNodeId(nodeId:String):TranscriptTextAreaRange {
			return getFirstTtaRangeForNodeInternal(nodeId, Utils.copyArray(transcriptTextAreaMapping).reverse());
		}
		
		private static function getFirstTtaRangeForNodeInternal(nodeId:String, ttaRanges:Array):TranscriptTextAreaRange {
			if (nodeId == null) {
				throw new ArgumentError("Passed a null node");
			}
			for each (var ttaRange:TranscriptTextAreaRange in ttaRanges) {
				if (ttaRange.isDescendantOrSelfOf(nodeId)) {
					// this is for outlines (headers) and text nodes
					return ttaRange;
				}
			}
			return null;			
		}
		
		private function calculateSelectionInfo(newSelectionBeginIndex:int, newSelectionEndIndex:int):TranscriptTextSelection {
			// remove any leading whitespace
			while (newSelectionBeginIndex < newSelectionEndIndex && StringUtil.isWhitespace(wrappedTextArea.text.charAt(newSelectionBeginIndex))) {
				//trace("Removing leading whitespace from selection");
				newSelectionBeginIndex++;
			}
			// remove any trailing whitespace
			while (newSelectionBeginIndex < newSelectionEndIndex && StringUtil.isWhitespace(wrappedTextArea.text.charAt(newSelectionEndIndex - 1))) {
				//trace("Removing trailing whitespace from selection");
				newSelectionEndIndex--;
			}
			// expand selection at start to include whole word (just expand to whitespace for the mo)
			while (newSelectionBeginIndex < newSelectionEndIndex && newSelectionBeginIndex > 0 && !StringUtil.isWhitespace(wrappedTextArea.text.charAt(newSelectionBeginIndex - 1))) {
				//trace("Expanding leading word into selection");
				newSelectionBeginIndex--;
			}
			// expand selection at end to include whole word (just expand to whitespace for the mo)
			while (newSelectionBeginIndex < newSelectionEndIndex && newSelectionEndIndex < wrappedTextArea.text.length && !StringUtil.isWhitespace(wrappedTextArea.text.charAt(newSelectionEndIndex))) {
				//trace("Expanding trailing word into selection");
				newSelectionEndIndex++;
			}				
			var firstTtaRange:TranscriptTextAreaRange = ttaRangeAfter(newSelectionBeginIndex);
			var lastTtaRange:TranscriptTextAreaRange = ttaRangeBefore(newSelectionEndIndex);
			if (firstTtaRange == null || lastTtaRange == null) {
				trace("Selection occurs outside the transcript text");
				return null;
			}
			if (newSelectionBeginIndex == newSelectionEndIndex) {
				// no continuous text selected
				return null;
			}
			
			if (firstTtaRange.node == lastTtaRange.node && firstTtaRange.isHeader()) {
				// selection is entirely within a header
				return TranscriptTextSelection.createSuperNodeInstance(firstTtaRange.node as MSuperNode);
			}
			
			// there is some portion of text selected

			if (firstTtaRange.isHeader()) {
				// starts in header but does not finish in header
				if (MUtils.hasAncestorOrSelfId(lastTtaRange.node, firstTtaRange.node.id)) {
					// the last element is within the outline/segment so just select the text of the outline
					return new TranscriptTextSelection((firstTtaRange.node as MSuperSegment).toSegmentRange());
				}
			}
			
			var segmentRange:MSegmentRange = MSegmentRange.createInstanceCorrespondingToNodes(firstTtaRange.node, lastTtaRange.node);
	
			var result:TranscriptTextSelection;
			if (segmentRange.isSingleSegment()) {
				// we start and end in the same segment - so maybe offsets come into play
				var firstOffset:int = newSelectionBeginIndex - firstTtaRange.beginIndex;
				var lastOffset:int = newSelectionEndIndex - lastTtaRange.beginIndex;
				var contentRange:MContentRange = new MContentRange(firstTtaRange.node as MContent, lastTtaRange.node as MContent);
				var contentRangeSubset:MContentRangeSubset = new MContentRangeSubset(contentRange, firstOffset, lastOffset);
				var segmentSubset:MSegmentSubset = contentRangeSubset.toSegmentSubset();
				result = new TranscriptTextSelection(segmentSubset);
			}
			else {
				// more than one segment selected
				result = new TranscriptTextSelection(segmentRange);
			}
			
			return result;			
		}
		
		private function ttaRangeBefore(index:int):TranscriptTextAreaRange {
			var previousTtaRange:TranscriptTextAreaRange = null;
			for each (var ttaRange:TranscriptTextAreaRange in transcriptTextAreaMapping) {
				if (ttaRange.beginIndex >= index) {
					break;
				}
				previousTtaRange = ttaRange;
			}
			return previousTtaRange;
		} 

		private function ttaRangeAfter(index:int):TranscriptTextAreaRange {
			for each (var ttaRange:TranscriptTextAreaRange in transcriptTextAreaMapping) {
				if (ttaRange.endIndex > index) {
					return ttaRange;
				}
			}
			return null;
		} 
		
		/**
		 * TODO - determine whether we really do need to update the HTML
		 */
		public function markupPropertiesChangeHandler(markup:MSuperNode):void {
			var oldTTSelection:TranscriptTextSelection = ttSelection;
			redraw(null);
			callLater(select, [oldTTSelection]);
		}
		
		public function markupHierarchyChangeHandler(markup:MSuperNode):void {
			if (markup.parent == null) {
				// markup was removed so just redraw
				redraw();
			}
			else {
				redrawThenSelectMarkup(markup);
			}
		}
		
		public function transcriptTextChangeHandler(affectedObj:Object = null):void {
			if (affectedObj is TranscriptTextSelection) {
				throw new Error("Passed an invalid affectedObj: " + affectedObj);
			}
			if (affectedObj == null) {
				redraw();
			}
			else {
				redraw(new TranscriptTextSelection(affectedObj));
			}
		}
		
	]]>
	</mx:Script>
	<mx:TextArea id="wrappedTextArea" paddingLeft="15" paddingRight="25" editable="false" condenseWhite="true" width="100%" height="100%" styleSheet="{STYLE_SHEET}" mouseDown="handleMouseDown(event)" keyUp="handleKeyUp(event)"/>
</mx:Canvas>