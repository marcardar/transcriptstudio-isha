<!--
   Transcript Studio for Isha Foundation: An XML based application that allows users to define 
   and store contextual metadata for contiguous sections within a text document. 

   Copyright 2008 Mark Carter, Swami Kevala

   This file is part of Transcript Studio for Isha Foundation.

   Transcript Studio for Isha Foundation is free software: you can redistribute it and/or modify it 
   under the terms of the GNU General Public License as  published by the Free Software 
   Foundation, either version 3 of the License, or (at your option) any later version.

   Transcript Studio for Isha Foundation is distributed in the hope that it will be useful, but 
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along with 
   Transcript Studio for Isha Foundation. If not, see http://www.gnu.org/licenses/.
-->
<mx:VDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:markupNS="org.ishafoundation.archives.transcript.components.studio.markup.*" xmlns:textNS="org.ishafoundation.archives.transcript.components.studio.text.*" resizeToContent="true" creationComplete="init()">
	<mx:Script>
    <![CDATA[
    	import org.ishafoundation.archives.transcript.model.GeneralNodeProperties;
    	import org.ishafoundation.archives.transcript.model.TranscriptTextSelection;
    	import name.carter.mark.flex.util.Utils;
    	import mx.events.PropertyChangeEvent;
    	import mx.binding.utils.ChangeWatcher;
    	import name.carter.mark.flex.project.mdoc.MContentProperties;
    	import name.carter.mark.flex.project.mdoc.MSegmentProperties;
    	import name.carter.mark.flex.project.mdoc.MNode;
    	import name.carter.mark.flex.project.mdoc.MDocument;
    	import name.carter.mark.flex.project.mdoc.MSuperNode;
    	import name.carter.mark.flex.project.mdoc.MSuperNodeProperties;
    	import name.carter.mark.flex.project.mdoc.MSegment;
    	import name.carter.mark.flex.project.mdoc.MSuperContent;
    	import name.carter.mark.flex.project.mdoc.MSuperSegment;
    	import name.carter.mark.flex.project.mdoc.TaggableMNode;
    	import org.ishafoundation.archives.transcript.model.Transcript;
    	import name.carter.mark.flex.util.icon.IconUtils;
    	
		private var _transcript:Transcript;
		
		private function init():void {
			ChangeWatcher.watch(markupsTree, "selectedItem", function(evt:Event):void {
				if (markupsTree.selectedMarkup == null) {
					markupPropertiesPane.clearPane();
				}
				else {
					initMarkupEditorPane();
				}
			});
			markupPropertiesPane.addEventListener(MarkupPropertiesPane.MARKUP_REMOVE_EVENT, function (evt:Event):void {
				selectedMarkup.remove();
				dispatchEvent(new MarkupEvent(MarkupEvent.DATA_CHANGE, true, null)); // null because it was removed
			});
			markupPropertiesPane.addEventListener(MarkupPropertiesPane.MARKUP_PROPERTIES_CHANGE_EVENT, function (evt:Event):void {
				// don't need to do anything because changes already committed
				dispatchEvent(new MarkupEvent(MarkupEvent.DATA_CHANGE, false, selectedMarkup));
			});
		}
		
		public function set transcript(transcript:Transcript):void {
			this._transcript = transcript;
			this.markupsTree.setMDoc(this._transcript.mdoc);
			this.markupPropertiesPane.clearPane();
		}
		
		[Bindable]
		public function get transcript():Transcript {
			return this._transcript;
		}
		
		public function refresh():void {
			markupsTree.setMDoc(this._transcript.mdoc);
		}

		public function get selectedMarkup():MSuperNode {
			return markupsTree.selectedMarkup;
		}
		
		public function set selectedMarkup(markup:MSuperNode):void {
			markupsTree.selectedMarkup = markup;
		}
		
		public function get selectedMarkupProps():MSuperNodeProperties {
			if (this.selectedMarkup == null) {
				return null;
			}
			return this.selectedMarkup.props;
		}
		
		private function get selectedMarkupPropsBeforeEdit():MSuperNodeProperties {
			return this._transcript.getCommittedMarkupProps(this.selectedMarkup);
		}
		
		public function redraw(markup:MSuperNode, completeRedraw:Boolean):void {
			this.markupsTree.redraw(markup, completeRedraw);
		}
		
		/**
		 * This is called either when the user selects or edits some text - more specifically, any way in which the
		 * text represented by the selection, changes.
		 */
		public function ttSelectionChangeHandler(ttSelection:TranscriptTextSelection):void {
			if (ttSelection == null) {
				// nothing selected
				return;
			}
			if (ttSelection.toSuperNode() != null) {
				this.selectedMarkup = ttSelection.toSuperNode();
			}
		}

		public function getMarkupIconPath(itemObj:Object):String {
			if (!(itemObj is MSuperNode)) {
				return null;
			} 
			var markup:MSuperNode = itemObj as MSuperNode;
           	return Utils.getIconPath(markup.props.markupTypeId);
		}		

        private function labelFunc(item:MNode):String {
			var label:String;
			if (item == null || item is MDocument) {
				return "No markups defined";	
			}
			label = createMarkupTitleShowingChangesFromId(item as MSuperNode);
            return label;
        }
        
        public function createMarkupTitleShowingChangesFromId(markup:MSuperNode):String {
        	if (markup == null) {
        		return null;
        	}
        	if (markup.parent == null) {
        		return "Markup already removed: " + markup.id;
        	}
			var markupAttrs:MSuperNodeProperties = markup.props;
			if (markupAttrs == null) {
				return null;
			}
        	var committedMarkupAttrs:MSuperNodeProperties = _transcript.getCommittedMarkupProps(markup);
        	return titleFuncForMarkupsTree(markupAttrs, committedMarkupAttrs);
        }
        
		private function isMarkupEditorPaneVisible():Boolean {
			return this.markupPropertiesPane.includeInLayout;
		}
		
		private function initMarkupEditorPane():void {
			var markup:MSuperNode = markupsTree.selectedMarkup;
			if (markup == null) {
				this.markupPropertiesPane.clearPane();
				return;
			}
			var allowOutline:Boolean = markup is MSuperSegment || markup is MSegment;
			var allowInline:Boolean = markup is MSuperContent || markup as MSegment;
			this.markupPropertiesPane.initPane(allowOutline, allowInline, this.selectedMarkupProps, _transcript.getCommittedMarkupProps(markup));
		}
		
		public function setNodePropertiesPaneVisibility(visible:Boolean):void {
			this.markupPropertiesPane.includeInLayout = visible;
			initMarkupEditorPane();
		}
		
		private function titleFuncForMarkupPropsPane(markupProps:MSuperNodeProperties, committedMarkupProps:MSuperNodeProperties):String {
			return createMarkupTitleShowingChanges(markupProps, committedMarkupProps, false);
		}

		private function titleFuncForMarkupsTree(markupProps:MSuperNodeProperties, committedMarkupProps:MSuperNodeProperties):String {
			return createMarkupTitleShowingChanges(markupProps, committedMarkupProps, true);
		}

		private function createMarkupTitleShowingChanges(markupAttrs:MSuperNodeProperties, committedMarkupAttrs:MSuperNodeProperties, includeAdditionalConcepts:Boolean):String {
			var result:String = "";
			if (committedMarkupAttrs == null) {
				result += "+";
			}
			else if (!committedMarkupAttrs.equals(markupAttrs)) {
				result += "*";
			}
			result += _transcript.createMarkupTitle(markupAttrs, includeAdditionalConcepts);
			return result;
		}
				
    ]]>
	</mx:Script>
	<markupNS:MarkupsTree id="markupsTree" width="100%" height="100%" minHeight="100" fontFamily="arial" fontSize="14" fontWeight="bold" showRoot="false" labelFunction="labelFunc" iconFunction="{IconUtils.getIconFunctionForDataRenderer(markupsTree, getMarkupIconPath, 24, 24, Utils.DEFAULT_ICON_CLASS)}"/>
	<markupNS:MarkupPropertiesPane id="markupPropertiesPane" label="Markup" width="100%" height="100%" paddingLeft="5" paddingRight="5" referenceMgr="{this.transcript.referenceMgr}" titleFunc="{titleFuncForMarkupPropsPane}"/>
</mx:VDividedBox>
