<!--
   Transcript Studio for Isha Foundation: An XML based application that allows users to define 
   and store contextual metadata for contiguous sections within a text document. 

   Copyright 2008 Mark Carter, Swami Kevala

   This file is part of Transcript Studio for Isha Foundation.

   Transcript Studio for Isha Foundation is free software: you can redistribute it and/or modify it 
   under the terms of the GNU General Public License as  published by the Free Software 
   Foundation, either version 3 of the License, or (at your option) any later version.

   Transcript Studio for Isha Foundation is distributed in the hope that it will be useful, but 
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along with 
   Transcript Studio for Isha Foundation. If not, see http://www.gnu.org/licenses/.
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:studioNS="org.ishafoundation.archives.transcript.components.studio.*" xmlns:metadataNS="org.ishafoundation.archives.transcript.components.metadata.*" width="100%" height="100%" verticalGap="0">
	<mx:Script>
		<![CDATA[
			import mx.managers.CursorManager;
			import org.ishafoundation.archives.transcript.components.studio.metadata.SessionSelectorDialog;
			import org.ishafoundation.archives.transcript.components.studio.metadata.OpenDialog;
			import org.ishafoundation.archives.transcript.components.studio.metadata.OpenByIdDialog;
			import org.ishafoundation.archives.transcript.util.ApplicationUtils;
			import org.ishafoundation.archives.transcript.db.DatabaseConstants;
			import org.ishafoundation.archives.transcript.importer.MSWordImporter;
			import name.carter.mark.flex.util.XMLUtils;
			import name.carter.mark.flex.util.Utils;
			import name.carter.mark.flex.util.icon.IconUtils;
			import org.ishafoundation.archives.transcript.components.generic.UnhandledChangesPopUpManager;
			import org.ishafoundation.archives.transcript.db.DatabaseManagerUtils;
			import mx.controls.Alert;
			import org.ishafoundation.archives.transcript.components.generic.AboutBox;
			import org.ishafoundation.archives.transcript.components.studio.metadata.SessionPropertiesEditDialog;
			import org.ishafoundation.archives.transcript.model.SessionProperties;
			import org.ishafoundation.archives.transcript.model.SessionManager;
			import org.ishafoundation.archives.transcript.model.ReferenceManager;
			import mx.managers.PopUpManager;
			import name.carter.mark.flex.project.mdoc.*;
			import org.ishafoundation.archives.transcript.components.studio.media.MediaPlayerDialog;
			import org.ishafoundation.archives.transcript.components.studio.importer.ImportWizard;
			import org.ishafoundation.archives.transcript.components.studio.metadata.EventPropertiesEditDialog;
			import org.ishafoundation.archives.transcript.components.studio.metadata.EventPropertiesCreateDialog;
			import org.ishafoundation.archives.transcript.model.EventProperties;
			import org.ishafoundation.archives.transcript.components.generic.DebugPopUp;
			import org.ishafoundation.archives.transcript.components.studio.concept.ConceptManagerDialog;
			import org.ishafoundation.archives.transcript.components.studio.category.CategoryManagerDialog;
			import org.ishafoundation.archives.transcript.model.Session;
			import mx.events.MenuEvent;
			import mx.events.CloseEvent;
			import org.ishafoundation.archives.transcript.db.DatabaseManager;

			[Bindable]
			public var databaseMgr:DatabaseManager;

			[Bindable]			
			private var referenceMgr:ReferenceManager;

			[Bindable]
			private var sessionMgr:SessionManager;
			
			[Bindable]
			private var session:Session;
			
			private static const DEFAULT_TITLE:String = ApplicationUtils.getApplicationName();
			
			[Bindable]
			public var title:String = DEFAULT_TITLE;
			
			[Bindable]
			public var status:String;
			
			public function init(username:String, databaseMgr:DatabaseManager):void {
				IconUtils.overrideIcon(Utils.DEFAULT_ICON_PATH, Utils.DEFAULT_ICON_CLASS);
				this.databaseMgr = databaseMgr;
				this.referenceMgr = new ReferenceManager(databaseMgr);
				this.sessionMgr = new SessionManager(username, referenceMgr, databaseMgr);
				this.referenceMgr.loadReferences(referenceXMLRetrieveSuccess, referenceXMLRetrieveFailure);
			}
		
			private function updateTitle():void {
				var transcriptId:String = this.session.id;
	  			if (transcriptId == null) {
	  				this.title = DEFAULT_TITLE;
	  			}
	  			else {
	  				this.title = "Transcript Id: " + transcriptId;
	  			}
 			}
 			
			private function referenceXMLRetrieveSuccess():void {
				this.status = "References loaded";
			}
			
			private static function referenceXMLRetrieveFailure(msg:String):void {
				throw new Error(msg);
			}
			
			public function retrieveClicked():void {
				showUnsavedChangesPopupIfNecessary(showOpenDialog);
			}
			
			public function retrieveByIdClicked():void {
				showUnsavedChangesPopupIfNecessary(showRetrieveTranscriptByIdDialog);
			}
			
			private function categoryManagerClicked():void {
				var thisRef:DisplayObject = this;
				reloadReferencesBeforeContinuing(function():void {
					var categoryManagerDialog:CategoryManagerDialog = new CategoryManagerDialog();
					categoryManagerDialog.referenceMgr = referenceMgr;
					PopUpManager.addPopUp(categoryManagerDialog, thisRef, true);
					categoryManagerDialog.doneButton.addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {
						// finished with the dialog box so update screen (to reflect changes)
						transcriptPane.markupsPane.redraw(transcriptPane.markupsPane.selectedMarkup, true);
					});
					var selectedMarkupProps:MSuperNodeProperties = transcriptPane.markupsPane.selectedMarkupProps;
					if (selectedMarkupProps != null) {
						categoryManagerDialog.categorySearchPane.initialCategoryId = selectedMarkupProps.markupCategoryId;
					}
				});
			}
			
			private function conceptManagerClicked():void {
				var thisRef:DisplayObject = this;
				reloadReferencesBeforeContinuing(function():void {
					var conceptManagerDialog:ConceptManagerDialog = ConceptManagerDialog.createInstance(referenceMgr);
					PopUpManager.addPopUp(conceptManagerDialog, thisRef, true);
				});
			}
			
			private function queryClicked():void {
				var queryExecutorDialog:XQueryExecutorDialog = new XQueryExecutorDialog();
				queryExecutorDialog.xQueryExecutor = databaseMgr;
				PopUpManager.addPopUp(queryExecutorDialog, this, true);
			}
			
			private function showUnsavedChangesPopupIfNecessary(successFunction:Function):void {
				UnhandledChangesPopUpManager.displayIfNecessaryUsingAsyncFunc(this.session != null && this.session.unsavedChanges, storeTranscript, storeTranscriptFailure, successFunction); 
			}
			
			private function showOpenDialog():void {
				var popup:OpenDialog = OpenDialog.display(this, databaseMgr, referenceMgr);
				popup.addEventListener(OpenDialog.OPEN_SESSION_REQUEST, function(evt:Event):void {
					var sessionId:String = popup.selectedSessionId;
					CursorManager.setBusyCursor();
					// first update the reference file - continue even if it fails
					reloadReferencesBeforeContinuing(function():void {
						sessionMgr.retrieveSession(sessionId, openSessionSuccess, openSessionFailure);
					});					
				});
			}
			
			private function showRetrieveTranscriptByIdDialog():void {
				var popup:OpenByIdDialog = new OpenByIdDialog();
				PopUpManager.addPopUp(popup, this, true);
				popup.okButton.addEventListener(MouseEvent.CLICK, function(event:MouseEvent):void {
					trace("Retrieving event/session using id: " + popup.enteredId);
					// id is of the form: <event/session id>[#<markup/paragraph id>] (i.e. the last part is optional)
					// examples: 20090329-n1-1-1800, 20090329-n1-1-1800#p12
					var hashIndex:int = popup.enteredId.indexOf('#');
					var docId:String = hashIndex < 0 ? popup.enteredId : popup.enteredId.substring(0, hashIndex);
					var nodeId:String = hashIndex < 0 ? null : popup.enteredId.substring(hashIndex + 1);
					reloadReferencesBeforeContinuing(function():void {
						databaseMgr.retrieveXML(function(docXML:XML):void {
							if (docXML == null) {
								Alert.show("No document exists with id: " + docId);
							}
							else if (docXML.localName() == "event") {
								var eventProps:EventProperties = new EventProperties(docXML);
								SessionSelectorDialog.displayIfNecessary(eventProps, popup, databaseMgr, function(sessionId:String):void {
									sessionMgr.retrieveSession(sessionId, openSessionSuccess, openSessionFailure);
									popup.closeMe();
								});
							}
							else if (docXML.localName() == "session") {
								var session:Session = sessionMgr.openSession(docXML);
								openSessionSuccess(session);
								popup.closeMe();
								// the nodeId might refer to a markup or something
								if (nodeId != null && nodeId.length > 0) {
									callLater(function():void {
										var node:MNode = session.transcript.mdoc.resolveId(nodeId);
										if (node == null) {
											Alert.show("Could not find markup with id: " + nodeId);
											return;
										}
										if (node is MSuperNode) {
											transcriptPane.markupsPane.selectedMarkup = node as MSuperNode;
											transcriptPane.textPane.selectMarkup(node as MSuperNode);
										}
									});
								}
							}
							else {
								Alert.show("Unknown xml doc type: " + docXML.localName());
							}
						}, function(msg:String):void {
							Alert.show(msg, "Could not retrieve document using id: " + docId);						
						}, null, docId, "/db/ts4isha/data");
					});
				});
			}
			
			private function collectionTreeFailed(msg:String):void {
				throw new Error(msg);
			}
			
			private function reloadReferencesBeforeContinuing(nextFunc:Function):void {
				this.referenceMgr.loadReferences(nextFunc, function(msg:String):void {
					Alert.show("Could not reload reference file: " + msg);
				});				
			}

			private function openSessionSuccess(session:Session):void {
				this.session = session;
				this.transcriptPane.transcript = session.transcript;
				this.status = "Successfully loaded transcript";
				updateTitle();
				CursorManager.removeBusyCursor();
			}
			
			private function openSessionFailure(msg:String):void {
				try {
					if (msg.indexOf("document not found") >= 0) {
						// exist message includes this phrase
						Alert.show("Transcript not found", "Error loading transcript");
					}
					else {
						var index:int = msg.indexOf("PermissionDeniedException:");
						if (index >= 0) {
							Alert.show(msg.substr(index + 26), "Error loading transcript");
						}
						else {
							throw new Error(msg);
						}				
					}
				}
				finally {
					CursorManager.removeBusyCursor();					
				}
			}
			
			private function storeTranscript(successFunction:Function, failureFunction:Function):void {
	  			if (!this.session.unsavedChanges) {
	  				return;
	  			}
				this.sessionMgr.storeTranscript(session, successFunction, failureFunction);
			}
			
			private function storeTranscriptSuccess():void
			{
				this.status = "Successfully saved transcript";
				this.session.saveChangesHandler();
				var selectedMarkup:MSuperNode = this.transcriptPane.markupsPane.selectedMarkup;
				// this is primarily to refresh the "committedMarkup" in the propertiesPane
				if (selectedMarkup != null) {
					this.transcriptPane.markupsPane.selectedMarkup = null;
					this.transcriptPane.markupsPane.selectedMarkup = selectedMarkup;
				}
				Alert.show("Successfully saved transcript changes");
			}
			 
			private function storeTranscriptFailure(msg:String):void
			{
				var index:int = msg.indexOf("PermissionDeniedException:");
				if (index >= 0) {
					Alert.show(msg.substr(index + 26), "Error saving transcript");
				}
				else {
					Alert.show(msg, "Error saving transcript");
				}				
			}
			
			private function reloadClicked():void {
				if (session.unsavedChanges) {
					// confirm this operation with the user
					Alert.show("Are you sure?", "Discarding changes...", Alert.OK | Alert.CANCEL, null, function(evt:CloseEvent):void {
						if (evt.detail==Alert.OK) {
							reloadTranscript();
						}
					});
				}
				else {
					reloadTranscript();
				} 
			}
			
			private function reloadTranscript():void {
				var reloadTranscriptFunction:Function = function():void {
					sessionMgr.retrieveSession(session.id, openSessionSuccess, openSessionFailure);
				}
				// first update the reference file - continue even if it fails
				referenceMgr.loadReferences(reloadTranscriptFunction, function(msg:String):void {
					trace("Couldnt retrieve reference.xml (continuing anyway): " + msg);
					reloadTranscriptFunction();
				});
			}
			
			private function editEventProps():void {
				var thisPanel:MainPanel = this;
				DatabaseManagerUtils.retrieveEventXML(session.props.eventId, databaseMgr, function(eventXML:XML):void {
					var eventProps:EventProperties = new EventProperties(eventXML);
					var popup:EventPropertiesEditDialog = EventPropertiesEditDialog.display(thisPanel, databaseMgr, referenceMgr, eventProps);
					popup.addEventListener(EventPropertiesEditDialog.EVENT_EDITED, function(event:Event):void {
						status = "Successfully edited event";
						Alert.show("Successfully edited event"); 
					});
				}, function(msg:String):void {;				
					Alert.show(msg, "Could not retrieve event XML");
				});
			}
			
			private function editSessionProps():void {
				var sessionPropsXMLCopy:XML = session.sessionXML.copy();
				delete sessionPropsXMLCopy.*;
				var sessionPropsCopy:SessionProperties = new SessionProperties(sessionPropsXMLCopy);
				var popup:SessionPropertiesEditDialog = SessionPropertiesEditDialog.display(this, databaseMgr, referenceMgr, sessionPropsCopy); 
				popup.addEventListener(SessionPropertiesEditDialog.SESSION_PROPS_EDITED, function():void {
					// copy the session props over the existing ones
					// first delete the old ones
					delete session.sessionXML.@*;
					for each (var attr:XML in sessionPropsXMLCopy.@*) {
						XMLUtils.setAttributeValue(session.sessionXML, attr.localName(), attr.toString());
					}
					session.unsavedChanges = true;
					Alert.show("Session properties edited but not yet saved");				
				});
			}
			
			private function editMediaProps():void {
				
			}
			
			public function createEventClicked():void {
				var popup:EventPropertiesCreateDialog = EventPropertiesCreateDialog.display(this, databaseMgr, referenceMgr, new EventProperties());
				popup.addEventListener(EventPropertiesCreateDialog.EVENT_CREATED, function(event:Event):void {
					status = "Successfully created event";
					Alert.show("Successfully created event"); 
				});
			}
			
			private function importClicked():void {
				if (session != null && session.unsavedChanges) {
					// confirm this operation with the user
					Alert.show("Are you sure?", "Discarding changes...", Alert.OK | Alert.CANCEL, null, function(evt:CloseEvent):void {
						if (evt.detail==Alert.OK) {
							importTranscript();
						}
					});
				}
				else {
					importTranscript();
				} 
			}
			
			private function importTranscript():void {
				var thisPanel:MainPanel = this;
				var popup:ImportWizard = new ImportWizard();
				popup.addEventListener(ImportWizard.OK_CLICKED, function(event:Event):void {
					var newSession:Session = sessionMgr.createSession(popup.sessionXML, function():void {
						session = newSession;
						Alert.show("Successfully created and saved session:\n\n" + session.id);
						transcriptPane.transcript = session.transcript;
					}, function(msg:String):void {
						Alert.show(msg, "Failed to create session");
					});
				});
				popup.databaseMgr = databaseMgr;
				popup.referenceMgr = referenceMgr;
				popup.importer = new MSWordImporter(databaseMgr);
				PopUpManager.addPopUp(popup, thisPanel, true);
			}
			
			private function showAboutBox():void {
				PopUpManager.createPopUp(this, AboutBox, true);
			}
			
			private function onMenuClick(evt:MenuEvent):void {
				var actionName:String = evt.item.@id;
				if ( actionName == "retrieve" ) {
					retrieveClicked();
				}
				else if ( actionName == "retrieveById" ) {
					retrieveByIdClicked();
				}
				else if ( actionName == "store" ) {
					storeTranscript(storeTranscriptSuccess, storeTranscriptFailure);
				}
				else if ( actionName == "reloadTranscript" ) {
					reloadClicked();
				}
				else if ( actionName == "eventProps" ) {
					editEventProps();
				}
				else if ( actionName == "sessionProps" ) {
					editSessionProps();
				}
				else if ( actionName == "mediaProps" ) {
					editMediaProps();
				}
				else if ( actionName == "markupText" ) {
					this.transcriptPane.markupText();
				}
				else if ( actionName == "removeMarkup" ) {
					this.transcriptPane.removeMarkup();
				}
				else if ( actionName == "mergeSegmentRange" ) {
					this.transcriptPane.mergeSegmentRange();
				}
				else if ( actionName == "deleteText" ) {
					this.transcriptPane.deleteText();
				}
				else if ( actionName == "nudgeUp" ) {
					this.transcriptPane.nudgeUp();
				}
				else if ( actionName == "nudgeDown" ) {
					this.transcriptPane.nudgeDown();
				}
				else if ( actionName == "showMediaPlayer" ) {					
					var mediaPlayerDialog:MediaPlayerDialog = MediaPlayerDialog.display(this);
					mediaPlayerDialog.devicesElement = session.sessionXML.devices[0];
				}
				else if ( actionName == "showMarkupPropertiesPane" ) {
					var showMarkupProps:Boolean = evt.item.@toggled.toString() == "true";
					this.transcriptPane.markupsPane.setNodePropertiesPaneVisibility(showMarkupProps);
				}
				else if ( actionName == "showTextPropertiesPane" ) {
					var showTextProps:Boolean = evt.item.@toggled.toString() == "true";
					this.transcriptPane.textPane.setPropertiesPaneVisibility(showTextProps);
				}
				else if ( actionName == "createEvent" ) {
					createEventClicked();
				}
				else if ( actionName == "import" ) {
					importClicked();
				}
				else if ( actionName == "categoryManager" ) {
					categoryManagerClicked();
				}
				else if ( actionName == "conceptManager" ) {
					conceptManagerClicked();
				}
				else if ( actionName == "query" ) {
					queryClicked();
				}
				else if ( actionName == "showHTMLSearchInterface" ) {					
					navigateToURL(new URLRequest(DatabaseConstants.EXIST_URL + "/rest/db/ts4isha/xquery/main.xql"), "_blank");
				}
				else if ( actionName.indexOf("debug") == 0) {
					var popup:DebugPopUp = new DebugPopUp();
					PopUpManager.addPopUp(popup, this, true);
					if ( actionName == "debugSession") {
						popup.textArea.text = this.session.sessionXML.toXMLString();
					}
					else if ( actionName == "debugReference") {
						popup.textArea.text = referenceMgr.referenceXML.toXMLString();
					}
					else if ( actionName == "debugTranscriptHTML") {
						popup.textArea.text = transcriptPane.textPane.transcriptTextArea.wrappedTextArea.htmlText;
					}
				}
				else if ( actionName == "highlightHTMLElements") {
					transcriptPane.textPane.transcriptTextArea.highlightHTMLElements();
				}
				else if ( actionName == "about") {
					showAboutBox();
				}
			}			
		]]>
	</mx:Script>
	<mx:MenuBar id="myMenuBar" width="100%" labelField="@label" itemClick="onMenuClick(event)">
		<mx:XMLList id="menuData">
			<menuitem label="File" enabled="{referenceMgr != null}">
				<menuitem id="retrieve" label="Open..."/>
				<menuitem id="retrieveById" label="Open by ID..."/>
				<!-- the enabled attribute value is a workaround because the following do not work:
					{session != null &amp;&amp; session.unsavedChanges}
					{session != null}
					{session != null ? true : false}
					{true &amp;&amp; session != null}
					{this &amp;&amp; session != null}
				-->
				<menuitem id="store" label="Save" enabled="{myMenuBar != null &amp;&amp; session != null &amp;&amp; session.unsavedChanges}"/>
				<menuitem id="reloadTranscript" label="Reload from database" enabled="{myMenuBar != null &amp;&amp; session != null}"/>
				<menuitem type="separator"/>
				<menuitem id="eventProps" label="Event properties..." enabled="{myMenuBar != null &amp;&amp; session != null}"/>
				<menuitem id="sessionProps" label="Session properties..." enabled="{myMenuBar != null &amp;&amp; session != null}"/>
				<menuitem id="mediaProps" label="Media properties..." enabled="{myMenuBar != null &amp;&amp; session != null}"/>
			</menuitem>
			<menuitem label="Selection" enabled="{transcriptPane.textPane.ttSelection != null}">
				<menuitem id="markupText" label="Markup text" enabled="{transcriptPane.textPane.ttSelection.allowMarkup()}"/>
				<menuitem id="removeMarkup" label="Remove markup" enabled="{transcriptPane.textPane.ttSelection.allowRemoveMarkup()}"/>
				<menuitem type="separator"/>
				<menuitem id="mergeSegmentRange" label="Merge paragraphs" enabled="{transcriptPane.textPane.ttSelection.allowMerge()}"/>
				<menuitem id="deleteText" label="Delete text" enabled="{transcriptPane.textPane.ttSelection.allowDeleteText()}"/>
				<menuitem type="separator"/>
				<menuitem id="nudgeUp" label="Nudge up" enabled="{transcriptPane.textPane.ttSelection.allowNudgeUp()}"/>
				<menuitem id="nudgeDown" label="Nudge down" enabled="{transcriptPane.textPane.ttSelection.allowNudgeDown()}"/>
			</menuitem>				
			<menuitem label="Window" enabled="{myMenuBar != null &amp;&amp; session != null}">
				<menuitem id="showMediaPlayer" label="Media player"/>
				<menuitem type="separator"/>
				<menuitem id="showMarkupPropertiesPane" label="Markup properties" type="check" toggled="true"/>
				<menuitem id="showTextPropertiesPane" label="Text properties" type="check" toggled="true"/>
			</menuitem>
			<menuitem label="Admin" enabled="{databaseMgr != null &amp;&amp; databaseMgr.isSuperUser}">
				<menuitem id="createEvent" label="Create event..."/>
				<menuitem id="import" label="Import..."/>
				<menuitem type="separator"/>
				<menuitem id="categoryManager" label="Categories..."/>
				<menuitem id="conceptManager" label="Concepts..."/>
				<menuitem type="separator"/>
				<menuitem id="query" label="Execute XQuery..."/>				
			</menuitem>
			<menuitem label="Tools">
				<menuitem id="showHTMLSearchInterface" label="HTML Search Interface"/>
			</menuitem>
			<menuitem label="Help">
				<menuitem label="Debug">
					<menuitem id="debugSession" label="Session XML"/>
					<menuitem id="debugReference" label="Reference XML"/>
					<menuitem id="debugTranscriptHTML" label="Transcript HTML"/>
					<!--menuitem id="highlightHTMLElements" label="Highlight HTML Elements"/-->
				</menuitem>					
				<menuitem id="about" label="About {ApplicationUtils.getApplicationName()}"/>
			</menuitem>
		</mx:XMLList>
	</mx:MenuBar>
	<!--mx:TextInput id="textInput" enter="{TranscriptStudio.testId(textInput.text)}"/-->
	<studioNS:TranscriptPane id="transcriptPane" width="100%" height="100%" referenceMgr="{this.referenceMgr}" visible="{this.transcriptPane.transcript != null}"/>
</mx:VBox>
