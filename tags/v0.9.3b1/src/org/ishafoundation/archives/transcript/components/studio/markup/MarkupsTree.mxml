<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="init()" backgroundDisabledColor="#FFFFFF" dataDescriptor="{new MarkupsTreeDataDescriptor()}" doubleClickEnabled="true" doubleClick="expandSelectedMarkupsDescendants()" enabled="{!isEmpty(dataProvider)}">
	<mx:Script>
	<![CDATA[
		import name.carter.mark.flex.util.Utils;
		import mx.controls.treeClasses.TreeItemRenderer;
		import name.carter.mark.flex.project.mdoc.MSegment;
		import mx.collections.ICollectionView;
		import mx.collections.ArrayCollection;
		import name.carter.mark.flex.project.mdoc.MSuperNode;
		import name.carter.mark.flex.project.mdoc.MUtils;
		import name.carter.mark.flex.project.mdoc.TaggableMNode;
		import name.carter.mark.flex.project.mdoc.MNode;
		import name.carter.mark.flex.project.mdoc.MDocument;
		import org.ishafoundation.archives.transcript.model.Transcript;
		import mx.controls.Alert;
		import mx.events.TreeEvent;
		import mx.events.ListEvent;
		
		private function init():void {
			addEventListener(MouseEvent.DOUBLE_CLICK, function(evt:MouseEvent):void {
				dispatchEvent(new MarkupEvent(MarkupEvent.SELECTION_CHANGE, true, selectedMarkup));
			});
			addEventListener(Event.CHANGE, function(evt:Event):void {
				if (selectedItem == null) {
					trace("User cleared selection in MarkupsTree");
				}
				else {
					trace("User changed selection in MarkupsTree: " + selectedItem.id);
				}
				dispatchEvent(new MarkupEvent(MarkupEvent.SELECTION_CHANGE, false, selectedMarkup));
				// sometimes this will not be what the user clicked on because of the automatic selection
				// of the current item when the tree dataprovider is updated
			});
			addEventListener(TreeEvent.ITEM_CLOSE, function(evt:TreeEvent):void {
				setFocus(); // this will make sure that FOCUS_OUT event is called on existing focussed component - important for MarkupAttributesEditorPane
				selectedMarkup = evt.item as MSuperNode;
			});
		}
	
		public function set selectedMarkup(markup:MSuperNode):void {
			if (this.selectedItem == markup) {
				// these values can be the same
				return;
			}
			if (markup == null) {
				selectedItem = null;
			}
			else {
				expandToMarkup(markup);
				selectedItem = markup;
			}
		}
		
		public function get selectedMarkup():MSuperNode {
			return this.selectedItem as MSuperNode;
		}
		
		public function setMDoc(mdoc:MDocument):void {
			//var simplifiedMarkupsXML:XML = simplifyMarkupsXML((mdoc as MDocument).nodeElement);
			this.dataProvider = mdoc;
			this.selectedMarkup = null;
		}
		
		private function isEmpty(dataProvider:Object):Boolean {
			if (dataProvider == null) {
				return false;
			}
			return dataDescriptor.getChildren(dataProvider[0] as MDocument).length == 0;
		}
		
		public function expandSelectedMarkupsDescendants():void {
			this.expandItem(this.selectedMarkup, true);
		}
		
		private function expandToMarkup(markup:MSuperNode):void {
			var ancestors:Array = MUtils.getAncestorsIncludingSelf(markup);
			for each (var ancestor:MNode in ancestors) {
				if (ancestor == markup || ancestor is MSegment) {
					continue;
				}
				expandItem(ancestor, true);
			}
		}

		public function redraw(markup:MSuperNode, completeRedraw:Boolean):void {
			trace("MarkupsTree redraw (" + (completeRedraw ? "complete" : "") + "). markup: " + (markup == null ? "<removed>" : markup.id));
			if (completeRedraw) {
				// need to reset the dataprovider because otherwise execution flow can get stuck in a loop at line 6343 of ListBase
				// also, if a markup is added at the top level and we don't reset the dataprovider - the change is not shown even if we perform invalidateList()
				resetDataProvider(markup);
			}
			else {
				invalidateList();
				//drawItem(itemToItemRenderer(markup), true, false);				
			}
		}

		/**
		 * The specified markup can be a markup to include in the openItems list
		 */
		private function resetDataProvider(markup:MSuperNode = null):void {
			var currentOpenItems:Array = Utils.copyArray(openItems as Array);
			if (markup != null && markup.parent != null) {
				if (currentOpenItems.indexOf(markup) < 0) {
					currentOpenItems.push(markup);
				}
			}
			dataProvider = dataProvider[0]; // this solves a bug where top level (level below root) items are not refreshed
			openItems = currentOpenItems;
			// if we dont do callLater then the markup is not selected
			callLater(function():void {
				selectedMarkup = markup;
			});
		}

	]]>
	</mx:Script>
		

</mx:Tree>
