<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="470" height="600" horizontalAlign="center" title="{getTitle(viewstack.selectedChild)}" creationComplete="init()" xmlns:importer="org.ishafoundation.archives.transcript.components.studio.importer.*">
	<mx:Script>
	<![CDATA[
		import org.ishafoundation.archives.transcript.model.ReferenceManager;
		import org.ishafoundation.archives.transcript.db.DatabaseConstants;
		import org.ishafoundation.archives.transcript.importer.MSWordImporter;
		import mx.core.Container;
		import org.ishafoundation.archives.transcript.db.XMLStorer;
		import org.ishafoundation.archives.transcript.model.EventProperties;
		import mx.events.PropertyChangeEvent;
		import mx.binding.utils.ChangeWatcher;
		import org.ishafoundation.archives.transcript.model.SessionProperties;
		import org.ishafoundation.archives.transcript.fs.EventFile;
		import org.ishafoundation.archives.transcript.fs.FileSystem;
		import org.ishafoundation.archives.transcript.fs.File;
		import org.ishafoundation.archives.transcript.fs.Collection;
		import name.carter.mark.flex.util.XMLUtils;
		import name.carter.mark.flex.util.Utils;
		import mx.managers.CursorManager;
		import name.carter.mark.flex.util.Utils;
		import mx.utils.StringUtil;
		import name.carter.mark.flex.util.collection.HashSet;
		import name.carter.mark.flex.util.collection.ISet;
		import org.ishafoundation.archives.transcript.util.IdUtils;
		import mx.formatters.DateFormatter;
		import mx.collections.ArrayCollection;
		import mx.formatters.DateBase;
		import mx.controls.TextInput;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		
	   	public static const OK_CLICKED:String = "OK_CLICKED";
	   	
	   	public var xmlStorer:XMLStorer;
	   	
	   	[Bindable]
	   	public var referenceMgr:ReferenceManager;
	   	
		private var _fileSystem:FileSystem;
		
		[Bindable]
		private var existingSessionIds:ISet;
		
		public var importer:MSWordImporter;
		
		public var sessionXML:XML;
		public var eventXML:XML;
		public var eventFile:EventFile;
	
		private function init():void {
			for each (var child:Container in viewstack.getChildren()) {
				if (ChangeWatcher.canWatch(child, "ready")) {
					ChangeWatcher.watch(child, "ready", function(evt:PropertyChangeEvent):void {
						buttonBox.executeBindings(true);
					});
				}
			}
			eventSelectorPane.createEventButton.addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {
				eventFile = null;
				nextInternal();
			});
		}
		
		private function getTitle(vsChild:Container):String {
			if (vsChild == importFilesPane) {
				title = "Select file(s) to import...";
			}
			else if (vsChild == importFilesPreviewPane) {
				title = "Preview import files...";
			}
			else if (vsChild == eventSelectorPane) {
				title = "Select existing event...";
			}
			else if (vsChild == eventPropertiesPane) {
				title = "Event properties...";
			}
			else if (vsChild == sessionPropertiesPane) {
				title = "Session properties...";
			}
			else {
				title = "Unknown pane";
			}
			return title;
		}
		
		[Bindable]
		public function set fileSystem(fileSystem:FileSystem):void {
			_fileSystem = fileSystem;
			existingSessionIds = fileSystem.getAllSessionIds();
		}
		
		public function get fileSystem():FileSystem {
			return _fileSystem;
		}
		
		private function backClicked(evt:MouseEvent):void {
			viewstack.selectedIndex--;
			// skip over the event properties pane if we are using an existing event
			if (viewstack.selectedChild == eventPropertiesPane && eventFile != null) {
				viewstack.selectedIndex--;
			}
			if (viewstack.selectedChild == eventSelectorPane) {
				updateEventsList();
			}
		}

		private function nextClicked(evt:MouseEvent):void {
			// postprocess pane
			if (viewstack.selectedChild == importFilesPane) {
				enabled = false;
				var selectedPaths:Array = new Array();
				for each (var file:File in importList.selectedItems.reverse()) {
					selectedPaths.push(file.path);
				}
				CursorManager.setBusyCursor();
				importer.importAudioTranscripts(selectedPaths, function(audioTranscripts:Array):void {
					CursorManager.removeBusyCursor();
					importFilesPreviewPane.audioTranscripts = audioTranscripts;
					enabled = true;
				}, function (msg:String):void {
					CursorManager.removeBusyCursor();
					Alert.show("Import failed: " + msg);
					enabled = true;
					return;
				});
			}
			else if (viewstack.selectedChild == importFilesPreviewPane) {
				eventXML = MSWordImporter.createEventElement(importFilesPreviewPane.audioTranscripts);
				sessionXML = MSWordImporter.createSessionElement(importFilesPreviewPane.audioTranscripts);
			}
			else if (viewstack.selectedChild == eventSelectorPane) {
				eventFile = eventSelectorPane.selectedEventFile;
				if (eventFile != null) {
					// skip eventProperties because we already have event
					viewstack.selectedIndex++;
				}
			}
			else if (viewstack.selectedChild == eventPropertiesPane) {
				// need to create the new event file
				var collection:Collection = eventPropertiesPane.collectionChooserTree.selectedItem as Collection;
				var filename:String = eventPropertiesPane.eventProps.generateFilename();
				var eventPath:String = collection.path + "/" + filename;
				xmlStorer.storeXML(eventPath, eventXML, function():void {
					fileSystem.refresh(collection.path, function():void {
						eventFile = collection.getEventFile(eventPropertiesPane.eventProps.id);
						if (eventFile == null) {
							throw new Error("Could not find the event file we just saved: " + eventPath);
						}
						nextInternal();
					}, function(msg:String):void {
						throw new Error("Could not refresh collection: " + collection.path + ": " + msg);
					});
				}, function (msg:String):void {
					throw new Error("Could not save event file '" + eventPath + "': " + msg);
				});
				return;
			}
			nextInternal();
		}
			
		private function nextInternal():void {
			viewstack.selectedIndex++;
			// preprocess pane
			if (viewstack.selectedChild == importFilesPane) {
			}
			else if (viewstack.selectedChild == importFilesPreviewPane) {
				
			}
			else if (viewstack.selectedChild == eventSelectorPane) {
				eventFile = null; // we don't want any event initially selected
				updateEventsList();
			}
			else if (viewstack.selectedChild == eventPropertiesPane) {
				var eventProps:EventProperties = new EventProperties(eventXML);
				if (eventProps.startAt == null) {
					var sessionProps:SessionProperties = new SessionProperties(sessionXML);
					eventProps.startAt = sessionProps.startAt;
				}
				if (eventProps.endAt == null) {
					eventProps.endAt = eventProps.startAt;
				}
				eventPropertiesPane.fileSystem = fileSystem;
				eventPropertiesPane.existingEventIds = fileSystem.getAllEventIds();						
				eventPropertiesPane.eventProps = eventProps;
			}
			else if (viewstack.selectedChild == sessionPropertiesPane) {
				var sp:SessionProperties = new SessionProperties(sessionXML);
				sessionPropertiesPane.eventFile = eventFile;
				sessionPropertiesPane.eventProps = new EventProperties(eventXML);
				sessionPropertiesPane.sessionProps = sp;
			}
		}
		
		private function updateEventsList():void {
			eventSelectorPane.allEvents = fileSystem.getAllEvents();
			if (eventFile != null) {
				callLater(function():void {
					eventSelectorPane.selectedEventFile = eventFile;
				});
			}
		}
		
		private function labelFunc(file:File):String {
			return file.name;
		}
		
		private function okClicked(event:Event):void {
			dispatchEvent(new Event(OK_CLICKED));
			closeMe();
		}
		
		private function closeMe():void {
			PopUpManager.removePopUp(this);
		}
		
		private function isBackEnabled():Boolean {
			return viewstack != null && viewstack.selectedIndex > 0;
		}
		
		private function isNextEnabled():Boolean {
			if (viewstack == null || viewstack.selectedIndex == viewstack.numChildren - 1) {
				// this is the last stack
				return false;
			}
			if (viewstack.selectedChild == importFilesPane) {
				return importList != null && importList.selectedIndices.length > 0;
			}
			else if (viewstack.selectedChild == importFilesPreviewPane) {
				return true;
			}
			else if (viewstack.selectedChild == eventSelectorPane) {
				return eventSelectorPane.ready;
			}
			else if (viewstack.selectedChild == eventPropertiesPane) {
				return eventPropertiesPane.ready;
			}
			else {
				return false;			
			}
		}
		
		private function isFinishEnabled():Boolean {
			if (viewstack.selectedIndex == viewstack.numChildren - 1) {
				// this is the last child
				return sessionPropertiesPane.ready;
			}
			else {
				return false;
			}
		}
		
		private static function getImportFiles(fileSystem:FileSystem):Array {
			var result:Array = fileSystem.getCollection(DatabaseConstants.IMPORT_COLLECTION_PATH).otherFiles;
			result.sort();
			return result;			
		}
		
	]]>
	</mx:Script>
	
	<mx:ViewStack id="viewstack" width="100%" height="100%" change="buttonBox.executeBindings(true)" creationPolicy="all">
		<mx:VBox id="importFilesPane" label="Import Session Files" width="100%" height="100%">
			<mx:List id="importList" width="100%" height="100%" allowMultipleSelection="true" dataProvider="{getImportFiles(fileSystem)}" labelFunction="labelFunc" change="buttonBox.executeBindings(true)"/>
		</mx:VBox>
		<importer:ImportFilesPreviewPane id="importFilesPreviewPane" width="100%" height="100%"/>
		<importer:EventSelectorPane id="eventSelectorPane" width="100%" height="100%"/>
		<importer:EventPropertiesPane id="eventPropertiesPane" label="Event Properties" width="100%" height="100%" referenceMgr="{referenceMgr}"/>
		<importer:SessionPropertiesPane id="sessionPropertiesPane" label="Session Properties" width="100%" height="100%" referenceMgr="{referenceMgr}"/>
	</mx:ViewStack>
	<mx:HBox id="buttonBox">
		<mx:Button label="&lt; Back" enabled="{isBackEnabled()}" click="backClicked(event)"/>
		<mx:Button id="nextButton" label="Next &gt;" enabled="{isNextEnabled()}" click="nextClicked(event)"/>
		<mx:Button label="Finish" enabled="{isFinishEnabled()}" click="okClicked(event)" />
		<mx:Button label="Cancel" click="closeMe()"/>
	</mx:HBox>
	
</mx:TitleWindow>
