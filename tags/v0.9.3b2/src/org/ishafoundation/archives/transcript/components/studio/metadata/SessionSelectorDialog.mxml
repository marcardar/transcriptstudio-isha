<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" x="50" width="470" horizontalAlign="center" title="Select Session" creationComplete="init()" xmlns:metadata="org.ishafoundation.archives.transcript.components.studio.metadata.*">
	<mx:Script>
	<![CDATA[
		import mx.rpc.http.HTTPService;
		import name.carter.mark.flex.util.DateUtils;
		import org.ishafoundation.archives.transcript.model.SessionProperties;
		import org.ishafoundation.archives.transcript.model.EventProperties;
		import org.ishafoundation.archives.transcript.db.XQueryExecutor;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		
		private static const MILLIS_IN_DAY:Number = 24 * 60 * 60 * 1000;
		
		private var startOfEventDay:Date;
	   	
		public static function display(sessionPropsElements:XMLList, eventProps:EventProperties, parent:DisplayObject):SessionSelectorDialog {
			var result:SessionSelectorDialog = new SessionSelectorDialog();
			result.startOfEventDay = result.getStartOfDay(eventProps.startAt);
			PopUpManager.addPopUp(result, parent, true);
			var arr:Array = [];
			for each (var sessionPropsElement:XML in sessionPropsElements) {
				arr.push(new SessionProperties(sessionPropsElement));
			}
			result.sessionList.dataProvider = arr;
			return result;
		}
	
		public static function displayIfNecessary(eventProps:EventProperties, parent:DisplayObject, xqueryExecutor:XQueryExecutor, successFunc:Function):void {
			xqueryExecutor.executeStoredXQuery("retrieve-session-props.xql", {eventId:eventProps.id}, function(returnVal:XML):void {
				var sessionPropsElements:XMLList = returnVal.*;
				switch (sessionPropsElements.length()) {
					case 0:
						Alert.show("No sessions defined for this event");
						//successFunc(null);
						break;
					case 1:
						var sessionId:String = (sessionPropsElements[0] as XML).@id;
						successFunc(sessionId);
						break;
					default:
						var dialog:SessionSelectorDialog = display(sessionPropsElements, eventProps, parent);
						dialog.okButton.addEventListener(MouseEvent.CLICK, function(evt:MouseEvent):void {
							// the user has selected a session
							var sessionId:String = dialog.selectedSessionProps.id;
							successFunc(sessionId);
						});						
				}
			}, function(msg:String):void {
				Alert.show(msg, "Could not retrieve sessions for selected event: " + eventProps.id); 
			}, HTTPService.RESULT_FORMAT_E4X);			
		}
	
		private function init():void {
		}
		
		public function get selectedSessionProps():SessionProperties {
			return sessionList.selectedItem as SessionProperties;
		}
		
		private function okClicked(evt:MouseEvent):void {
			closeMe();
		}
		
		private function closeMe():void {
			PopUpManager.removePopUp(this);
		}

		private function resultLabelFunc(sessionProps:SessionProperties):String {
			var eventDay:int = getEventDay(sessionProps);
			var result:String = "Day " + (eventDay == 0 ? "?" : eventDay) + ": ";
			if (sessionProps.startAtIncludesTime()) {
				result += dateFormatter.format(sessionProps.startAt) + " ";
			}
			if (sessionProps.subTitle != null) {
				result += sessionProps.subTitle + " ";
			}
			result += "[" + sessionProps.id + "]";
			return result;
		}
		
		/**
		 * 1-based day (0, means unknown)
		 */
		private function getEventDay(sessionProps:SessionProperties):int {
			if (startOfEventDay == null || sessionProps.startAt == null) {
				return 0;
			}
			// get start of day
			var millisDiff:Number = getStartOfDay(sessionProps.startAt).getTime() - startOfEventDay.getTime();
			if (millisDiff < 0) {
				return 0;
			}
			return int(millisDiff / MILLIS_IN_DAY) + 1;
		}
		
		private function getStartOfDay(date:Date):Date {
			if (date == null) {
				return null;
			}
			var result:Date = DateUtils.parseStandardDateString(startOfDayFormatter.format(date));
			return result;
		} 
	]]>
	</mx:Script>

	<mx:DateFormatter id="startOfDayFormatter" formatString="YYYY-MM-DD"/>
	<mx:DateFormatter id="dateFormatter" formatString="hh:mm"/>
	<mx:List id="sessionList" width="100%" labelFunction="{resultLabelFunc}"/>
	<mx:HBox id="buttonBox">
		<mx:Button id="okButton" label="OK" enabled="{sessionList.selectedItem != null}" click="okClicked(event)" />
		<mx:Button label="Cancel" click="closeMe()"/>
	</mx:HBox>
	
</mx:TitleWindow>
