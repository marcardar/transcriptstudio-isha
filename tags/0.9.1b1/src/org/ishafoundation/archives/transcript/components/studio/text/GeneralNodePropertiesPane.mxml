<?xml version="1.0" encoding="utf-8"?>

<!--
   Transcript Studio for Isha Foundation: An XML based application that allows users to define 
   and store contextual metadata for contiguous sections within a text document. 

   Copyright 2008 Mark Carter, Swami Kevala

   This file is part of Transcript Studio for Isha Foundation.

   Transcript Studio for Isha Foundation is free software: you can redistribute it and/or modify it 
   under the terms of the GNU General Public License as  published by the Free Software 
   Foundation, either version 3 of the License, or (at your option) any later version.

   Transcript Studio for Isha Foundation is distributed in the hope that it will be useful, but 
   WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or 
   FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

   You should have received a copy of the GNU General Public License along with 
   Transcript Studio for Isha Foundation. If not, see http://www.gnu.org/licenses/.
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" horizontalAlign="left" backgroundColor="#FFFFFF" enabled="{this.generalProps != null}" creationComplete="init()" minHeight="300" paddingTop="5" paddingBottom="5" paddingLeft="5" paddingRight="5">
	<mx:Script>
    <![CDATA[
    	import name.carter.mark.flex.util.Utils;
    	import mx.collections.ArrayCollection;
    	import org.ishafoundation.archives.transcript.model.Transcript;
    	import mx.utils.StringUtil;
    	import org.ishafoundation.archives.transcript.model.GeneralNodeProperties;
    	
    	public static const GENERAL_NODE_PROPERTIES_CHANGE_EVENT:String = "GENERAL_NODE_PROPERTIES_CHANGE_EVENT";
    	
    	[Bindable]
		public var speakers:Array;
    	[Bindable]
		public var spokenLanguages:Array = ["english", "tamil", "other"];

		[Bindable]
		public var generalProps:GeneralNodeProperties;

		[Bindable]
		public var sourceIds:Array;

		public function init():void {
			if (generalProps != null) {
				initPane(generalProps);
			}
		}

		public function initPane(generalProps:GeneralNodeProperties):void {
			this.generalProps = generalProps;
/*				if (generalProps.confidentialMixedValues) {
					confidentialRadioButtonGroup.selectedValue = "mixed";
				}
				else {
					confidentialRadioButtonGroup.selectedValue = generalProps.confidential;
				}*/
		}
		
		public function clearPane():void {
			this.generalProps = null;
		}
		
		private function somethingChanged():void {
			dispatchEvent(new Event(GENERAL_NODE_PROPERTIES_CHANGE_EVENT));
		}
		
		private function confidentialChanged():void {
			var newValue:Boolean = new Boolean(confidentialRadioButtonGroup.selectedValue);
			trace("Confidential changed: " + newValue);
			generalProps.confidential = newValue;
			somethingChanged();
		}
		
		private function speakerChanged():void {
			if (speakerComboBox.selectedItem == null) {
				// user is entering some text
				return;
			}
			var newValue:String = speakerComboBox.selectedItem.toString();
			trace("Speaker changed: " + newValue);
			generalProps.speaker = newValue;
			somethingChanged();
		}
		
		private function speakerHandler():void {
			if (speakerComboBox.selectedItem == null) {
				// user edited a new speaker?
				var newValue:String = Utils.normalizeSpace(speakerComboBox.text).toLowerCase();
				if (newValue.length > 0) {
					if (speakers.indexOf(newValue) < 0) {
						trace("New speaker set: " + newValue);
						speakers.push(newValue);
					}
					generalProps.speaker = newValue;
					somethingChanged();
				}
			}
		}
		
		private function spokenLanguageChanged():void {
			var newValue:String = languageComboBox.selectedItem.toString();
			trace("SpokenLanguage changed: " + newValue);
			generalProps.spokenLanguage = newValue;
			somethingChanged();
		}
		
		private function emphasisChanged():void {
			var newValue:Boolean = new Boolean(emphasisRadioButtonGroup.selectedValue);
			trace("Emphasis changed: " + newValue);
			generalProps.emphasis = newValue;
			somethingChanged();
		}
		
    ]]>
	</mx:Script>
	<mx:Grid>
		<mx:GridRow width="100%" height="100%" id="speakerGridRow" enabled="{generalProps != null &amp;&amp; generalProps.speakerEnabled}">
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:Label width="100%" textAlign="right" text="Speaker" paddingBottom="2" paddingTop="2"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:ComboBox id="speakerComboBox" width="100%" dataProvider="{speakers}" editable="true" selectedIndex="{generalProps.speaker == null ? -1 : speakers.indexOf(generalProps.speaker)}" prompt="Select..." change="speakerChanged()" enter="speakerHandler()" focusOut="speakerHandler()"/>
			</mx:GridItem>
			<mx:GridItem height="100%">
				<mx:RadioButton label="mixed" enabled="false" id="speakerMixedRadioButton" selected="{generalProps.speaker == null}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:Label width="100%" textAlign="right" text="Spoken Language" paddingBottom="2" paddingTop="2"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:ComboBox id="languageComboBox" width="100%" dataProvider="{spokenLanguages}" prompt="Select..." editable="false" selectedIndex="{generalProps.spokenLanguage == null ? -1 : spokenLanguages.indexOf(generalProps.spokenLanguage)}" change="spokenLanguageChanged()"/>
			</mx:GridItem>
			<mx:GridItem height="100%">
				<mx:RadioButton label="mixed" id="spokenLanguageMixedRadioButton" enabled="false" selected="{generalProps.spokenLanguage == null}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" enabled="{generalProps != null &amp;&amp; generalProps.emphasisEnabled}">
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:Label width="100%" textAlign="right" text="Emphasized" paddingBottom="2" paddingTop="2"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:RadioButtonGroup id="emphasisRadioButtonGroup" selectedValue="{generalProps.emphasis == null ? 'mixed' : generalProps.emphasis.toString()}" change="emphasisChanged()"/>
				<mx:RadioButton label="true" groupName="emphasisRadioButtonGroup" id="emphasisTrueRadioButton" value="{true}"/>
				<mx:RadioButton label="false" groupName="emphasisRadioButtonGroup" id="emphasisFalseRadioButton" value="{false}"/>
			</mx:GridItem>
			<mx:GridItem height="100%">
				<mx:RadioButton label="mixed" groupName="emphasisRadioButtonGroup" enabled="false" id="emphasisMixedRadioButton"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%" id="confidentialGridRow" enabled="{generalProps != null &amp;&amp; generalProps.confidentialEnabled}">
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:Label width="100%" textAlign="right" text="Confidential"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%">
				<mx:RadioButtonGroup id="confidentialRadioButtonGroup" selectedValue="{generalProps.confidential == null ? 'mixed' : generalProps.confidential.toString()}" change="confidentialChanged()"/>
				<mx:RadioButton label="true" groupName="confidentialRadioButtonGroup" id="confidentialTrueRadioButton" value="{true}"/>
				<mx:RadioButton label="false" groupName="confidentialRadioButtonGroup" id="confidentialFalseRadioButton" value="{false}"/>
			</mx:GridItem>
			<mx:GridItem height="100%">
				<mx:RadioButton label="mixed" groupName="confidentialRadioButtonGroup" enabled="false" id="confidentialMixedRadioButton"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
</mx:VBox>
