<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical" width="600" horizontalAlign="center" title="Event / Session Builder" xmlns:metadata="org.ishafoundation.archives.transcript.components.studio.metadata.*" xmlns:importer="org.ishafoundation.archives.transcript.components.studio.importer.*" creationComplete="init()">
	<mx:Script>
	<![CDATA[
		import mx.binding.utils.BindingUtils;
		import org.ishafoundation.archives.transcript.components.studio.metadata.EventSelectorDialog;
		import org.ishafoundation.archives.transcript.components.studio.metadata.SessionPropertiesCreatorDialog;
		import org.ishafoundation.archives.transcript.components.studio.metadata.EventPropertiesCreatorDialog;
		import org.ishafoundation.archives.transcript.model.Session;
		import mx.rpc.http.HTTPService;
		import org.ishafoundation.archives.transcript.db.DatabaseConstants;
		import mx.events.FlexEvent;
		import mx.utils.StringUtil;
		import mx.managers.PopUpManager;
		import org.ishafoundation.archives.transcript.components.studio.metadata.EventPropertiesPane;
		import mx.managers.CursorManager;
		import mx.controls.Alert;
		import org.ishafoundation.archives.transcript.model.SessionProperties;
		import org.ishafoundation.archives.transcript.model.EventProperties;
		import org.ishafoundation.archives.transcript.importer.MSWordImporter;
		import org.ishafoundation.archives.transcript.model.ReferenceManager;
		import org.ishafoundation.archives.transcript.db.XQueryExecutor;
		import org.ishafoundation.archives.transcript.db.DatabaseManager;
		import mx.core.Container;
		import mx.events.PropertyChangeEvent;
		import mx.binding.utils.ChangeWatcher;
		
		public static const IMPORT_CLICKED:String = "IMPORT_CLICKED";
		
		[Bindable]
		public var databaseMgr:DatabaseManager;
		
		[Bindable]
		public var referenceMgr:ReferenceManager;
		
		[Bindable]
		private var importedEventProps:EventProperties;
		private var importedSessionProps:SessionProperties;
		private var importedDeviceElements:XMLList;
		private var importedTranscriptElement:XML;
		
		[Bindable]
		private var _eventProps:EventProperties;
		public var sessionXML:XML;
	
		public static function display(parent:DisplayObject, databaseMgr:DatabaseManager, referenceMgr:ReferenceManager):ImportDialog {
			var result:ImportDialog = new ImportDialog();
			result.databaseMgr = databaseMgr;
			result.referenceMgr = referenceMgr;
			PopUpManager.addPopUp(result, parent, true);
			return result;
		}
		
		private function init():void {
			ChangeWatcher.watch(transcriptsToImportList, "dataProvider", function():void {
				callLater(buttonBox.invalidateProperties);
			});
		}
		
		[Bindable]
		public function get eventProps():EventProperties {
			return _eventProps;
		}
		
		public function set eventProps(eventProps:EventProperties):void {
			_eventProps = eventProps;
			refreshEventTextArea();
		}
		
		private function transcriptsToImportSelectorHandler():void {
			var transcriptsToImportSelectorDialog:TranscriptsToImportSelectorDialog = TranscriptsToImportSelectorDialog.display(this, databaseMgr);
			transcriptsToImportSelectorDialog.addEventListener(TranscriptsToImportSelectorDialog.FILES_IMPORTED, function(evt:Event):void {
				if (transcriptsToImportSelectorDialog.selectedAudioTranscripts.length == 0) {
					importedEventProps = null;
					importedSessionProps = null;
					importedTranscriptElement = null;
					importedDeviceElements = null;
				}
				else {
					var importedEventXML:XML = MSWordImporter.createEventElement(transcriptsToImportSelectorDialog.selectedAudioTranscripts);
					importedEventProps = new EventProperties(importedEventXML);
					var importedSessionXML:XML = MSWordImporter.createSessionElement(transcriptsToImportSelectorDialog.selectedAudioTranscripts);
					importedSessionProps = new SessionProperties(importedSessionXML);
					importedDeviceElements = importedSessionXML.devices.device;
					delete importedSessionXML.devices;
					importedTranscriptElement = importedSessionXML.transcript[0];
					delete importedSessionXML.transcript;
					if (importedEventProps.startAt == null) {
						importedEventProps.startAt = importedSessionProps.startAt;
					}
					if (importedEventProps.endAt == null) {
						importedEventProps.endAt = importedEventProps.startAt;
					}
				}
				transcriptsToImportList.dataProvider = transcriptsToImportSelectorDialog.selectedPaths;
			});
		}
			
		private function eventSelectorHandler():void {
			var eventSelectorDialog:EventSelectorDialog = EventSelectorDialog.display(this, databaseMgr, referenceMgr);
			eventSelectorDialog.eventSelectorPane.addEventListener(FlexEvent.CREATION_COMPLETE, function(evt:FlexEvent):void {
				if (importedEventProps != null) {
					eventSelectorDialog.eventSelectorPane.eventTypeComboBox.selectedItem = importedEventProps.type;
					eventSelectorDialog.eventSelectorPane.eventTypeComboBox.enabled = false;
					if (importedEventProps.startAt != null) {
						eventSelectorDialog.eventSelectorPane.yearComboBox.selectedItem = importedEventProps.startAt.fullYear.toString();
					}
					eventSelectorDialog.eventSelectorPane.searchClicked();
				}
			});
			eventSelectorDialog.addEventListener(EventSelectorDialog.EVENT_SELECTED, function(evt:Event):void {
				eventProps = eventSelectorDialog.selectedEventProps;
			});
		}
		
		private function eventCreatorHandler():void {
			var templateProps:EventProperties = importedEventProps == null ? null : importedEventProps.copy();
			var eventCreatorDialog:EventPropertiesCreatorDialog = EventPropertiesCreatorDialog.display(this, databaseMgr, referenceMgr, templateProps);
			eventCreatorDialog.addEventListener(EventPropertiesCreatorDialog.EVENT_EDITED, function(evt:Event):void {
				eventProps = eventCreatorDialog.eventProps;
				status = "Successfully created event: " + eventProps.id;
				Alert.show("Event ID: " + eventProps.id, "Successfully created event");
			});
		}
		
		private function sessionCreatorHandler():void {
			var templateProps:SessionProperties = importedSessionProps == null ? null : importedSessionProps.copy();
			var sessionCreatorDialog:SessionPropertiesCreatorDialog = SessionPropertiesCreatorDialog.display(this, databaseMgr, referenceMgr, eventProps, templateProps);
			sessionCreatorDialog.addEventListener(SessionPropertiesCreatorDialog.SESSION_EDITED, function(evt:Event):void {
				var newSessionProps:SessionProperties = sessionCreatorDialog.sessionProps;
				sessionList.refresh(newSessionProps.id);
				status = "Successfully created session: " + newSessionProps.id;
				Alert.show("Session ID: " + newSessionProps.id, "Successfully created session");
			});
		}
		
		private function refreshEventTextArea():void {
			if (eventProps == null) {
				eventTextArea.text = null;
				return;
			}
			eventTextArea.text = eventProps.id;
		}
		
		private function sessionListErrorHandler(msg:String):void {
			Alert.show(msg, "Could not retrieve sessions for selected event: " + eventProps.id); 
		}
		
		private function sessionListLabelFunc(sessionProps:SessionProperties):String {
			return sessionProps.getFullName(eventProps.startAt);
		}
		
		private function get sessionProps():SessionProperties {
			return sessionList.selectedItem as SessionProperties;
		}
		
		private function importClicked():void {
			if (sessionList.selectedItem == null) {
				throw new Error("No session was selected");
			}
			if (importedTranscriptElement == null) {
				throw new Error("No transcript to import");
			}
			// now we might have the session date so use that to prefix the media UUIDs
			fixMediaUUIDs();
			// there is a transcript to import into the session
			// load the session from the database
			databaseMgr.retrieveXML(function(existingSessionXML:XML):void {
				if ((existingSessionXML.transcript as XMLList).length() > 0) {
					Alert.show("Session already has transcript - choose another");
					return;
				}
				var session:Session = new Session(existingSessionXML, eventProps, referenceMgr);
				session.appendTranscript(importedTranscriptElement, importedDeviceElements);
				sessionXML = session.sessionXML;
				dispatchEvent(new Event(IMPORT_CLICKED));
				closeMe();
			}, function(msg:String):void {
				Alert.show(msg, "Could not retrieve selected session: " + sessionProps.id);
			}, "session", sessionProps.id, DatabaseConstants.DATA_COLLECTION_PATH);
		}
		
		private function fixMediaUUIDs():void {
			// now we might have the session date so use that to prefix the media UUIDs
			var mediaIdPrefix:String;
			if (sessionProps.startAt == null) {
				mediaIdPrefix = "00000000";
			}
			else {
				var startAtDate:Date = sessionProps.startAt;
				mediaIdPrefix = startAtDate.fullYear + EventPropertiesPane.fixWidth(startAtDate.month + 1, 2) + EventPropertiesPane.fixWidth(startAtDate.date, 2);
			}
			// use the digits from the sourceId in the new mediaId
			mediaIdPrefix += "-" + eventProps.type;
			mediaIdPrefix += "1"; // TODO: maybe sometimes this should really be "2" or even "3"
			mediaIdPrefix += "-a1";
			for each (var mediaElement:XML in importedDeviceElements.media) {
				var sourceId:String = mediaElement.@id.toString();
				var mediaIdSuffix:String = sourceId.replace(/[a-z]/ig, "");
				while (mediaIdSuffix.length < 6) {
					mediaIdSuffix = "0" + mediaIdSuffix;
				}
				mediaElement.@id = mediaIdPrefix + "-" + mediaIdSuffix;
			}			
		}
		
		private function getEventText(eventProps:EventProperties):String {
			if (eventProps == null) {
				return null;
			}
			var result:String = eventProps.generateLongText(referenceMgr);
			return result;
		}
		
		private function closeMe():void {
			PopUpManager.removePopUp(this);
		}
		
	]]>
	</mx:Script>
	<mx:HBox width="100%" verticalAlign="bottom" paddingTop="10">
		<mx:Label text="Transcripts to import: "/>
		<mx:Label text="{importedEventProps == null ? '&lt;Nothing selected&gt;' : transcriptsToImportList.dataProvider.source.length + ' file(s) selected'}"/>
		<mx:Spacer height="100%" width="100%"/>
		<mx:Button label="Select..." id="selectExternalTranscriptsButton" click="transcriptsToImportSelectorHandler()"/>
		<mx:Button label="New..." visible="false"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Spacer height="100%" width="60"/>
		<mx:List height="50" width="100%" id="transcriptsToImportList" selectable="false" enabled="{importedEventProps != null}"/>
	</mx:HBox>
	<mx:HBox width="100%" verticalAlign="bottom" paddingTop="20">
		<mx:Label text="Event:" width="60"/>
		<mx:Label text="{eventProps == null ? '&lt;Nothing selected&gt;' : 'ID: ' + eventProps.id}"/>
		<mx:Spacer height="100%" width="100%"/>
		<mx:Button label="Select..." id="selectEventButton" click="eventSelectorHandler()"/>
		<mx:Button label="New..." id="newEventButton" click="eventCreatorHandler()"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Spacer height="100%" width="60"/>
		<mx:TextArea width="100%" height="80" id="eventTextArea" enabled="{eventProps != null}" editable="false" text="{getEventText(eventProps)}" borderStyle="none" borderThickness="0"/>
	</mx:HBox>
	<mx:HBox width="100%" verticalAlign="middle" paddingTop="20">
		<mx:Label text="Session:" width="60"/>
		<mx:Label text="{sessionList.selectedItem == null ? '&lt;Nothing selected&gt;' : 'ID: ' + sessionList.selectedItem.id}"/>
		<mx:Spacer height="100%" width="100%"/>
		<mx:Button label="New..." id="newSessionButton" enabled="{eventProps != null}" click="sessionCreatorHandler()"/>
	</mx:HBox>
	<mx:HBox width="100%">
		<mx:Spacer height="100%" width="60"/>
		<metadata:SessionList width="100%" height="70" id="sessionList" enabled="{eventProps != null}" xqueryExecutor="{databaseMgr}" errorHandler="{sessionListErrorHandler}" eventProps="{eventProps}"/>
	</mx:HBox>
	
	<mx:HBox id="buttonBox">
		<mx:HBox id="importButtonBox" visible="{transcriptsToImportList.dataProvider != null &amp;&amp; transcriptsToImportList.dataProvider.length > 0}" includeInLayout="{importButtonBox.visible}">
			<mx:Button label="Import" click="importClicked()" id="importButton" enabled="{sessionList.selectedItem != null}"/>
			<mx:Button label="Cancel" click="closeMe()" id="cancelButton"/>
		</mx:HBox>
		
		<mx:HBox id="nonImportButtonBox" visible="{!importButtonBox.visible}" includeInLayout="{nonImportButtonBox.visible}">
			<mx:Button label="Done" click="closeMe()" id="doneButton"/>
		</mx:HBox>		
	</mx:HBox>
	
</mx:TitleWindow>
