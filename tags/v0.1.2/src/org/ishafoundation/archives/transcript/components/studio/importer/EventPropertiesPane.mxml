<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="creationCompleteHandler()" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10" xmlns:collection="org.ishafoundation.archives.transcript.components.studio.collection.*">
	<mx:Script>
	<![CDATA[
		import org.ishafoundation.archives.transcript.db.DatabaseConstants;
		import org.ishafoundation.archives.transcript.fs.FileSystem;
		import org.ishafoundation.archives.transcript.model.EventProperties;
		import name.carter.mark.flex.util.collection.ISet;
		import mx.utils.StringUtil;
		import mx.formatters.DateBase;
		import org.ishafoundation.archives.transcript.util.IdUtils;
		import name.carter.mark.flex.util.Utils;
		import name.carter.mark.flex.util.XMLUtils;
		import mx.collections.ArrayCollection;
		
		private static const UNKNOWN_LABEL:String = "Unknown";  

		[Bindable]
		public var fileSystem:FileSystem;

		[Bindable]
		private var _eventProps:EventProperties;
		[Bindable]
		public var existingEventIds:ISet;

		private function creationCompleteHandler():void {
			eventIndexBox.dataProvider = getArrayCollectionSequence(1, 99, 2, false);
			eventLanguageComboBox.dataProvider = EventProperties.LANGUAGES;
			eventTypeComboBox.dataProvider = EventProperties.TYPES;
		}
		
		[Bindable]
		public function get eventProps():EventProperties {
			return _eventProps;
		}
		
		public function set eventProps(newEventProps:EventProperties):void {
			if (newEventProps === _eventProps) {
				return;
			}
			_eventProps = newEventProps;
			eventNameTextInput.text = _eventProps.name;
			eventTypeComboBox.selectedItem = _eventProps.type;
			startAtDateField.selectedDate = _eventProps.startAt; 
			endAtDateField.selectedDate = _eventProps.endAt;
			eventLocationTextInput.text = _eventProps.location; 
			eventLanguageComboBox.selectedItem = _eventProps.language;
			commentTextArea.text = _eventProps.comment;
			// reset the other fields
			eventIndexBox.selectedIndex = 0;
			collectionChooserTree.selectedItem = null;
			idFieldChangeHandler();
		}

		public static function getArrayCollectionSequence(first:int, last:int, width:int, includeUnknown:Boolean):ArrayCollection {
			var arr:Array = new Array();
			for (var i:int = Math.min(first, last); i <= Math.max(first, last); i++) {
				arr.push(fixWidth(i, width));
			}
			if (first > last) {
				arr.reverse();
			}
			if (includeUnknown) {
				arr.unshift(UNKNOWN_LABEL);
			}
			return new ArrayCollection(arr);
		}

		private function idFieldChangeHandler():void {
			if (existingEventIds == null || eventIndexBox == null || startAtDateField == null) {
				return;
			}
			var eventIndex:int = new uint(eventIndexBox.text);
			var idDateComponentStr:String;
			if (eventProps.startAt == null) {
				idDateComponentStr = "yxxxxmxxdxx";
			}
			else {
				var startAtDate:Date = eventProps.startAt;
				idDateComponentStr = "y" + startAtDate.fullYear + "m" + fixWidth(startAtDate.month + 1, 2) + "d" + fixWidth(startAtDate.date, 2);
			}
			eventProps.id = idDateComponentStr + "e" + fixWidth(eventIndex, 2);
		}

		private static function fixWidthForComboBox(comboBox:ComboBox, width:int):String {
			var result:String;
			if (comboBox.selectedItem == null) {
				var text:String = StringUtil.trim(comboBox.text.toLowerCase());
				result = fixWidth(text, width); 
				// update text since not one of predefined
				comboBox.text = result;				
			}
			else {
				result = comboBox.selectedItem.toString();
			}
			return result;
		}
		
		private static function fixWidth(s:Object, width:int):String {
			var result:String = s.toString();
			if (result.length > width) {
				return result.substring(result.length - width);
			}
			while (result.length < width) {
				result = "0" + result;
			} 
			return result;
		}
		
	]]>
	</mx:Script>
	<mx:Boolean id="idAlreadyExists">{existingEventIds.contains(eventProps.id)}</mx:Boolean>
	<mx:Boolean id="invalidId">{!IdUtils.isValidEventId(eventProps.id)}</mx:Boolean>

	<mx:Boolean id="ready">{!invalidId &amp;&amp; !idAlreadyExists &amp;&amp; StringUtil.trim(eventNameTextInput.text).length > 0 &amp;&amp; collectionChooserTree.selectedItem != null}</mx:Boolean>
	<mx:Grid width="100%" height="100%">
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Event Name"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:TextInput width="100%" id="eventNameTextInput" change="{eventProps.name = eventNameTextInput.text}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Type"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:ComboBox id="eventTypeComboBox" width="100" textAlign="center" change="{eventProps.type = eventTypeComboBox.selectedItem as String}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Event Start Date"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:DateField id="startAtDateField" formatString="DD/MM/YYYY" change="{eventProps.startAt = startAtDateField.selectedDate;idFieldChangeHandler()}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Event End Date"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:DateField id="endAtDateField" formatString="DD/MM/YYYY" change="{eventProps.endAt = endAtDateField.selectedDate}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Event Index"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:ComboBox id="eventIndexBox" width="100" textAlign="center" change="{idFieldChangeHandler()}"/>
					<mx:Label text="{!invalidId &amp;&amp; idAlreadyExists ? '- INDEX ALREADY IN USE' : ''}" color="#FF0000"/> 
				</mx:HBox>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Location"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:TextInput width="100%" id="eventLocationTextInput" change="{eventProps.location = eventLocationTextInput.text}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="middle">
				<mx:Label text="Language"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:ComboBox id="eventLanguageComboBox" width="100" textAlign="center" change="{eventProps.language = eventLanguageComboBox.selectedItem as String}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="60">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="top" paddingTop="2">
				<mx:Label text="Notes"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<mx:TextArea id="commentTextArea" width="100%" height="100%" change="{eventProps.comment = commentTextArea.text}"/>
			</mx:GridItem>
		</mx:GridRow>
		<mx:GridRow width="100%" height="100%">
			<mx:GridItem height="100%" horizontalAlign="right" verticalAlign="top" paddingTop="2">
				<mx:Label text="Collection"/>
			</mx:GridItem>
			<mx:GridItem width="100%" height="100%" verticalAlign="middle">
				<collection:CollectionChooserTree id="collectionChooserTree" width="100%" height="100%" dataProvider="{fileSystem.getCollection(DatabaseConstants.DATA_COLLECTION_PATH)}"/>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
</mx:VBox>
